{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "Unit Skins",
    "description": "",
    "type": "object",
    "properties": {
        "gravity_well_props": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/gravity_well_props_definition_ptr"
            }
        },
        "name": {
            "type": "object",
            "properties": {
                "group": {
                    "$ref": "#/$defs/unit_name_group"
                }
            },
            "unevaluatedProperties": false
        },
        "skin_stages": {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "child_mesh_alias_bindings": {
                        "$ref": "#/$defs/unit_child_mesh_alias_bindings"
                    },
                    "death_sequence_group": {
                        "$ref": "#/$defs/death_sequence_group_definition_ptr"
                    },
                    "effects": {
                        "$ref": "#/$defs/unit_effects_definition"
                    },
                    "gui": {
                        "$ref": "#/$defs/unit_gui_definition"
                    },
                    "is_main_view_icon_visible_camera_distance": {
                        "type": "number"
                    },
                    "light": {
                        "$ref": "#/$defs/mesh_light_definition"
                    },
                    "main_view_icon": {
                        "$ref": "#/$defs/unit_main_view_icon_definition"
                    },
                    "min_camera_distance": {
                        "type": "number",
                        "exclusiveMinimum": 0.0
                    },
                    "planet_mesh": {
                        "$ref": "#/$defs/planet_mesh_definition"
                    },
                    "sounds": {
                        "$ref": "#/$defs/unit_sounds_definition"
                    },
                    "star_mesh": {
                        "$ref": "#/$defs/star_mesh_definition"
                    },
                    "unit_mesh": {
                        "$ref": "#/$defs/unit_mesh_definition"
                    },
                    "unit_radius_when_mesh_visible": {
                        "type": "number"
                    },
                    "use_mesh_bounding_sphere_for_hit_effects": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "is_main_view_icon_visible_camera_distance"
                ],
                "unevaluatedProperties": false
            }
        },
        "version": {
            "type": "integer"
        }
    },
    "required": [
        "skin_stages"
    ],
    "unevaluatedProperties": false,
    "$defs": {
        "action_unit_sort": {
            "type": "object",
            "properties": {
                "sort_steps": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "sort_order": {
                                "type": "string",
                                "enum": [
                                    "ascending",
                                    "descending"
                                ]
                            },
                            "sort_type": {
                                "type": "string",
                                "enum": [
                                    "build_or_virtual_supply",
                                    "distance_to_unit"
                                ]
                            }
                        },
                        "required": [
                            "sort_order",
                            "sort_type"
                        ],
                        "if": {
                            "properties": {
                                "sort_type": {
                                    "const": "distance_to_unit"
                                }
                            }
                        },
                        "then": {
                            "properties": {
                                "distance_reference_unit": {
                                    "$ref": "#/$defs/action_unit"
                                }
                            },
                            "required": [
                                "distance_reference_unit"
                            ]
                        },
                        "unevaluatedProperties": false
                    }
                }
            },
            "unevaluatedProperties": false
        },
        "unit_main_view_icon_definition": {
            "type": "object",
            "properties": {
                "extra_rotation": {
                    "description": "extra rotation applied to icon (due to icon being reused in selection window)",
                    "type": "number"
                },
                "group": {
                    "$ref": "#/$defs/unit_main_view_icon_group"
                },
                "has_rotation": {
                    "type": "boolean"
                },
                "icon": {
                    "$ref": "#/$defs/brush_ptr"
                },
                "is_additive": {
                    "type": "boolean"
                },
                "override_icon_background_color": {
                    "type": "string"
                },
                "selected_icon": {
                    "$ref": "#/$defs/brush_ptr"
                },
                "sub_selected_icon": {
                    "$ref": "#/$defs/brush_ptr"
                },
                "use_owner_player_color": {
                    "type": "boolean"
                }
            },
            "required": [
                "group"
            ],
            "unevaluatedProperties": false
        },
        "corona_definition": {
            "type": "object",
            "properties": {
                "animation_speed": {
                    "type": "number"
                },
                "basic_constants": {
                    "$ref": "#/$defs/prim3d_basic_cb_data"
                },
                "color": {
                    "type": "string"
                },
                "color_texture": {
                    "$ref": "#/$defs/file_texture_ptr"
                },
                "curvature_bleed_distance": {
                    "type": "number"
                },
                "minimum_visiblity_percent": {
                    "type": "number"
                },
                "noise_0_intensity": {
                    "type": "number"
                },
                "noise_0_zoom": {
                    "type": "number"
                },
                "noise_1_intensity": {
                    "type": "number"
                },
                "noise_1_zoom": {
                    "type": "number"
                },
                "noise_texture": {
                    "$ref": "#/$defs/file_texture_ptr"
                },
                "radius_scalar": {
                    "type": "number"
                },
                "shader": {
                    "type": "string",
                    "enum": [
                        "planet_corona",
                        "star_corona"
                    ]
                }
            },
            "required": [
                "basic_constants",
                "color",
                "color_texture",
                "radius_scalar",
                "shader"
            ],
            "unevaluatedProperties": false
        },
        "action_group": {
            "type": "object",
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/$defs/action"
                    }
                },
                "constraint": {
                    "$ref": "#/$defs/action_constraint"
                }
            },
            "unevaluatedProperties": false
        },
        "beam_effect_definition_ptr": {
            "type": "string"
        },
        "unit_flair_effect_definition": {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "constraint": {
                        "type": "string",
                        "enum": [
                            "is_loot_collection_active",
                            "is_exotic_factory_busy",
                            "is_unit_factory_busy",
                            "is_unit_factory_idle",
                            "is_damaged",
                            "has_unit_item",
                            "does_not_have_unit_item",
                            "is_crippled",
                            "is_not_crippled"
                        ]
                    },
                    "hull_damage_percentage": {
                        "description": "default=0.5",
                        "type": "number"
                    },
                    "mesh_point_name": {
                        "$ref": "#/$defs/mesh_point_name"
                    },
                    "particle_effect": {
                        "$ref": "#/$defs/particle_effect_definition_ptr"
                    },
                    "sound": {
                        "$ref": "#/$defs/sound_ptr"
                    },
                    "unit_item": {
                        "$ref": "#/$defs/unit_item_definition_ptr"
                    }
                },
                "unevaluatedProperties": false
            }
        },
        "brush_ptr": {
            "type": "string"
        },
        "unit_mesh_definition": {
            "type": "object",
            "properties": {
                "is_shadow_blocker": {
                    "type": "boolean"
                },
                "mesh": {
                    "$ref": "#/$defs/mesh_ptr"
                },
                "shader": {
                    "type": "string",
                    "enum": [
                        "basic",
                        "ship",
                        "planet_surface",
                        "debug_normals",
                        "test_multi_uv",
                        "test_mask"
                    ]
                }
            },
            "required": [
                "mesh"
            ],
            "unevaluatedProperties": false
        },
        "effect_alias_name": {
            "type": "string"
        },
        "action_value_id": {
            "type": "string"
        },
        "unit_factory_modifier_type": {
            "type": "string",
            "enum": [
                "build_time"
            ]
        },
        "child_mesh_alias_bindings": {
            "type": "string"
        },
        "action_memory_float_value": {
            "type": "object",
            "properties": {
                "float_variable_id": {
                    "$ref": "#/$defs/action_memory_float_variable_id"
                },
                "value_id": {
                    "$ref": "#/$defs/action_value_id"
                }
            },
            "required": [
                "float_variable_id",
                "value_id"
            ],
            "unevaluatedProperties": false
        },
        "death_sequence_group_definition_ptr": {
            "type": "string"
        },
        "effect_alias_definition": {
            "type": "object",
            "properties": {
                "beam": {
                    "$ref": "#/$defs/beam_effect_definition_ptr"
                },
                "particle_effect": {
                    "$ref": "#/$defs/particle_effect_definition_ptr"
                },
                "sounds": {
                    "$ref": "#/$defs/sound_ptr"
                }
            },
            "unevaluatedProperties": false
        },
        "buff_empire_modifier_id": {
            "type": "string"
        },
        "effects": {
            "type": "string"
        },
        "file_texture_ptr": {
            "type": "string"
        },
        "gravity_well_props_definition_ptr": {
            "type": "string"
        },
        "action_memory_unit_variable_id": {
            "type": "string"
        },
        "localized_text_ptr": {
            "type": "string"
        },
        "main_view_icon": {
            "type": "string"
        },
        "unit_main_view_icon_group": {
            "type": "string"
        },
        "shield_effect_definition_ptr": {
            "type": "string"
        },
        "mesh_light_definition": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "point_finite",
                        "point_infinite",
                        "cone",
                        "line"
                    ]
                }
            },
            "required": [
                "type"
            ],
            "allOf": [
                {
                    "if": {
                        "properties": {
                            "type": {
                                "const": "point_finite"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "color": {
                                "type": "string"
                            },
                            "intensity": {
                                "type": "number",
                                "minimum": 0.0
                            },
                            "surface_radius": {
                                "type": "number",
                                "minimum": 0.0
                            }
                        },
                        "required": [
                            "color",
                            "intensity",
                            "surface_radius"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "type": {
                                "const": "point_infinite"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "color": {
                                "type": "string"
                            },
                            "intensity": {
                                "type": "number",
                                "minimum": 0.0
                            }
                        },
                        "required": [
                            "color",
                            "intensity"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "type": {
                                "const": "cone"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "angle": {
                                "type": "number",
                                "minimum": 0.0
                            },
                            "color": {
                                "type": "string"
                            },
                            "intensity": {
                                "type": "number",
                                "minimum": 0.0
                            },
                            "surface_radius": {
                                "type": "number",
                                "minimum": 0.0
                            }
                        },
                        "required": [
                            "angle",
                            "color",
                            "intensity",
                            "surface_radius"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "type": {
                                "const": "line"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "color": {
                                "type": "string"
                            },
                            "intensity": {
                                "type": "number",
                                "minimum": 0.0
                            },
                            "surface_radius": {
                                "type": "number",
                                "minimum": 0.0
                            }
                        },
                        "required": [
                            "color",
                            "intensity",
                            "surface_radius"
                        ]
                    }
                }
            ],
            "unevaluatedProperties": false
        },
        "unit_child_mesh_alias_name": {
            "type": "string"
        },
        "unit_gui_definition": {
            "type": "object",
            "properties": {
                "description": {
                    "$ref": "#/$defs/localized_text_ptr"
                },
                "hud_button_icon": {
                    "description": "Icon used on build menu buttons. Vestigual now that we reuse hud_icon consistently.",
                    "$ref": "#/$defs/brush_ptr"
                },
                "hud_icon": {
                    "description": "85x40",
                    "$ref": "#/$defs/brush_ptr"
                },
                "hud_monochrome_icon": {
                    "description": "Icon used in the Selection Window colorered with player color. Should map to main_view_icon.",
                    "$ref": "#/$defs/brush_ptr"
                },
                "hud_picture": {
                    "description": "Picture shown at the bottom of the HUD when unit is selected.",
                    "$ref": "#/$defs/brush_ptr"
                },
                "hud_selection_window_icon_offet": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "minItems": 2,
                    "maxItems": 2
                },
                "name": {
                    "$ref": "#/$defs/localized_text_ptr"
                },
                "special_operation_names": {
                    "description": "Allows overriding the name when unit is a special operation unit (ex. garrison)",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "kind": {
                                "$ref": "#/$defs/special_operation_unit_kind"
                            },
                            "name": {
                                "$ref": "#/$defs/localized_text_ptr"
                            }
                        },
                        "unevaluatedProperties": false
                    }
                },
                "tooltip_icon": {
                    "description": "Tiny picture used next to ship name. Not typically specified, will fallback to hud_monochrome_icon->hud-icon.",
                    "$ref": "#/$defs/brush_ptr"
                },
                "tooltip_picture": {
                    "description": "Big picture used on tooltips when building unit. (459x216)",
                    "$ref": "#/$defs/brush_ptr"
                }
            },
            "required": [
                "description",
                "hud_icon",
                "name"
            ],
            "unevaluatedProperties": false
        },
        "weapon_tag_set": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/weapon_tag"
            },
            "maxItems": 32
        },
        "mesh_point_name": {
            "type": "string"
        },
        "star_mesh_definition": {
            "type": "object",
            "properties": {
                "atmosphere": {
                    "$ref": "#/$defs/star_mesh_atmosphere_definition"
                },
                "corona": {
                    "$ref": "#/$defs/corona_definition"
                },
                "mesh": {
                    "$ref": "#/$defs/mesh_ptr"
                },
                "shader": {
                    "type": "string",
                    "enum": [
                        "star_surface",
                        "star_atmosphere"
                    ]
                }
            },
            "required": [
                "corona",
                "mesh"
            ],
            "unevaluatedProperties": false
        },
        "buff_trigger_event_type": {
            "type": "string",
            "enum": [
                "on_ability_started",
                "on_ability_executed",
                "on_ability_level_changed",
                "on_buff_started",
                "on_child_buff_started",
                "on_buff_stacking_limit_met",
                "on_buff_made_dead",
                "on_parent_buff_made_dead",
                "on_child_buff_made_dead",
                "on_current_spawner_antimatter_consumed",
                "on_current_spawner_antimatter_restored",
                "on_current_spawner_antimatter_removed",
                "on_current_spawner_augment_pending_damage_as_source",
                "on_current_spawner_augment_pending_damage_as_destination",
                "on_current_spawner_damaged",
                "on_current_spawner_planet_bombed",
                "on_current_spawner_hull_restored",
                "on_current_spawner_armor_restored",
                "on_current_spawner_shields_restored",
                "on_current_spawner_try_make_dead",
                "on_current_spawner_made_dead",
                "on_current_spawner_planet_made_dead",
                "on_current_spawner_planet_track_completed",
                "on_current_spawner_planet_track_queue_increased",
                "on_current_spawner_player_ownership_changed",
                "on_current_spawner_current_gravity_well_changed",
                "on_current_spawner_current_gravity_well_fixture_ownership_changed",
                "on_current_spawner_current_gravity_well_occupied_with_enemy_units",
                "on_current_spawner_current_gravity_well_unoccupied_with_enemy_units",
                "on_current_spawner_current_gravity_well_allied_player_count_changed",
                "on_current_spawner_physics_destination_reached",
                "on_current_spawner_spawned_strikecraft",
                "on_current_spawner_spawned_torpedo",
                "on_current_spawner_hyperspace_started",
                "on_current_spawner_hyperspace_stopped",
                "on_current_spawner_planet_scuttle_completed",
                "on_current_spawner_planet_colonized",
                "on_current_spawner_unit_level_changed",
                "on_try_prevent_damage",
                "on_unit_antimatter_removed_by_current_spawner",
                "on_unit_antimatter_restored_by_current_spawner",
                "on_unit_damaged_by_current_spawner",
                "on_unit_planet_bombed_by_current_spawner",
                "on_unit_hull_restored_by_current_spawner",
                "on_unit_armor_restored_by_current_spawner",
                "on_unit_shields_restored_by_current_spawner",
                "on_unit_made_dead_by_current_spawner",
                "on_unit_planet_made_dead_by_current_spawner",
                "on_phase_lanes_changed",
                "on_unit_finished_building_in_gravity_well"
            ]
        },
        "mesh_ptr": {
            "type": "string"
        },
        "action_player": {
            "type": "object",
            "properties": {
                "ability": {
                    "$ref": "#/$defs/action_ability"
                },
                "owned_unit": {
                    "$ref": "#/$defs/action_unit"
                },
                "player_type": {
                    "type": "string",
                    "enum": [
                        "unit_owner",
                        "buff_owner_player",
                        "ability_npc_player"
                    ]
                }
            },
            "required": [
                "player_type"
            ],
            "unevaluatedProperties": false
        },
        "unit_exhaust_trail_effect_definition": {
            "type": "object",
            "properties": {
                "mesh_point": {
                    "$ref": "#/$defs/mesh_point_name"
                },
                "trail_effect": {
                    "$ref": "#/$defs/particle_effect_definition_ptr"
                }
            },
            "unevaluatedProperties": false
        },
        "sound_ptr": {
            "type": "string"
        },
        "mesh_material_ptr": {
            "type": "string"
        },
        "particle_effect_definition_ptr": {
            "type": "string"
        },
        "unit_mutation_name": {
            "type": "string"
        },
        "action_math_operator": {
            "type": "object",
            "properties": {
                "operator_type": {
                    "type": "string",
                    "enum": [
                        "assign",
                        "negate",
                        "add",
                        "subtract",
                        "multiply",
                        "divide",
                        "mod",
                        "max",
                        "min",
                        "roof",
                        "floor",
                        "clamped_lerp"
                    ]
                }
            },
            "allOf": [
                {
                    "if": {
                        "properties": {
                            "operator_type": {
                                "const": "assign"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "operand_value": {
                                "$ref": "#/$defs/action_value_id"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "operator_type": {
                                "const": "add"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "operand_value": {
                                "$ref": "#/$defs/action_value_id"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "operator_type": {
                                "const": "subtract"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "operand_value": {
                                "$ref": "#/$defs/action_value_id"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "operator_type": {
                                "const": "multiply"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "operand_value": {
                                "$ref": "#/$defs/action_value_id"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "operator_type": {
                                "const": "divide"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "operand_value": {
                                "$ref": "#/$defs/action_value_id"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "operator_type": {
                                "const": "mod"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "operand_value": {
                                "$ref": "#/$defs/action_value_id"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "operator_type": {
                                "const": "max"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "operand_value": {
                                "$ref": "#/$defs/action_value_id"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "operator_type": {
                                "const": "min"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "operand_value": {
                                "$ref": "#/$defs/action_value_id"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "operator_type": {
                                "const": "clamped_lerp"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "lerp_range_lower_bound_value": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "lerp_range_upper_bound_value": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "lerp_t_value": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "lerp_value_lower_bound_value": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "lerp_value_upper_bound_value": {
                                "$ref": "#/$defs/action_value_id"
                            }
                        },
                        "required": [
                            "lerp_range_lower_bound_value",
                            "lerp_range_upper_bound_value",
                            "lerp_t_value",
                            "lerp_value_lower_bound_value",
                            "lerp_value_upper_bound_value"
                        ]
                    }
                }
            ],
            "unevaluatedProperties": false
        },
        "planet_mesh_definition": {
            "type": "object",
            "properties": {
                "atmosphere": {
                    "$ref": "#/$defs/planet_mesh_atmosphere_definition"
                },
                "city": {
                    "$ref": "#/$defs/planet_mesh_city_definition"
                },
                "corona": {
                    "$ref": "#/$defs/corona_definition"
                },
                "elevator_surface_radius_scalar": {
                    "type": "number"
                },
                "mesh": {
                    "$ref": "#/$defs/mesh_ptr"
                },
                "shader": {
                    "type": "string",
                    "enum": [
                        "planet_surface",
                        "planet_city",
                        "planet_atmosphere"
                    ]
                }
            },
            "required": [
                "mesh"
            ],
            "unevaluatedProperties": false
        },
        "target_filter_unit_type": {
            "type": "string",
            "enum": [
                "strikecraft",
                "corvette",
                "frigate",
                "cruiser",
                "capital_ship",
                "titan",
                "structure",
                "starbase",
                "planet",
                "star",
                "gravity_well",
                "phase_lane",
                "asteroid",
                "torpedo",
                "cannon_shell",
                "loot",
                "debris",
                "untargetable"
            ]
        },
        "buff_unit_factory_modifier_id": {
            "type": "string"
        },
        "planet_mesh_atmosphere_definition": {
            "type": "object",
            "properties": {
                "atmosphere_color": {
                    "type": "string"
                },
                "atmosphere_spread": {
                    "type": "number"
                },
                "cloud_animation_speed": {
                    "type": "number"
                },
                "cloud_material": {
                    "$ref": "#/$defs/mesh_material_ptr"
                },
                "cloud_noise_0_intensity": {
                    "type": "number"
                },
                "cloud_noise_0_zoom": {
                    "type": "number"
                },
                "cloud_noise_1_intensity": {
                    "type": "number"
                },
                "cloud_noise_1_zoom": {
                    "type": "number"
                },
                "cloud_noise_texture": {
                    "$ref": "#/$defs/mesh_material_ptr"
                },
                "cloud_rotation_speed": {
                    "type": "number"
                },
                "shader": {
                    "type": "string",
                    "enum": [
                        "planet_surface",
                        "planet_city",
                        "planet_atmosphere"
                    ]
                }
            },
            "required": [
                "atmosphere_color",
                "atmosphere_spread",
                "cloud_animation_speed",
                "cloud_noise_0_intensity",
                "cloud_noise_0_zoom",
                "cloud_noise_1_intensity",
                "cloud_noise_1_zoom",
                "cloud_rotation_speed",
                "shader"
            ],
            "unevaluatedProperties": false
        },
        "planet_mesh_city_definition": {
            "type": "object",
            "properties": {
                "city_material": {
                    "$ref": "#/$defs/mesh_material_ptr"
                },
                "shader": {
                    "type": "string",
                    "enum": [
                        "planet_surface",
                        "planet_city",
                        "planet_atmosphere"
                    ]
                }
            },
            "required": [
                "city_material",
                "shader"
            ],
            "unevaluatedProperties": false
        },
        "prim3d_basic_cb_data": {
            "type": "object",
            "properties": {
                "alpha_ramp_curvature": {
                    "description": "default=1",
                    "type": "number"
                },
                "alpha_ramp_growth_delay": {
                    "description": "default=2.2",
                    "type": "number"
                },
                "alpha_ramp_max_alpha_scalar": {
                    "description": "default=1",
                    "type": "number"
                },
                "alpha_ramp_steepness": {
                    "description": "default=0.3",
                    "type": "number"
                },
                "depth_fade_distance": {
                    "description": "default=1",
                    "type": "number"
                },
                "depth_fade_opacity": {
                    "description": "default=1",
                    "type": "number"
                },
                "emissive_factor": {
                    "description": "default=1",
                    "type": "number"
                }
            },
            "unevaluatedProperties": false
        },
        "unit_damage_effects_definition": {
            "type": "object",
            "properties": {
                "damage_effects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/$defs/unit_damage_effect_definition"
                    }
                },
                "max_damage_effect_count": {
                    "type": "integer"
                }
            },
            "unevaluatedProperties": false
        },
        "star_mesh_atmosphere_definition": {
            "type": "object",
            "properties": {
                "material": {
                    "$ref": "#/$defs/mesh_material_ptr"
                },
                "noise_texture": {
                    "$ref": "#/$defs/file_texture_ptr"
                },
                "shader": {
                    "type": "string",
                    "enum": [
                        "star_surface",
                        "star_atmosphere"
                    ]
                }
            },
            "required": [
                "material",
                "noise_texture",
                "shader"
            ],
            "unevaluatedProperties": false
        },
        "unit_child_mesh_alias_bindings": {
            "type": "object",
            "properties": {
                "map": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "mesh_alias_name": {
                                "$ref": "#/$defs/unit_child_mesh_alias_name"
                            },
                            "mesh_definition": {
                                "$ref": "#/$defs/unit_mesh_definition"
                            }
                        },
                        "unevaluatedProperties": false
                    }
                }
            },
            "unevaluatedProperties": false
        },
        "action_data_source_definition_ptr": {
            "type": "string"
        },
        "action_value": {
            "type": "object",
            "properties": {
                "ratio": {
                    "$ref": "#/$defs/action_value_ratio"
                },
                "transform_type": {
                    "type": "string",
                    "enum": [
                        "fixed",
                        "simulation_time",
                        "action_level",
                        "current_buff_memory_value",
                        "operand_buff_memory_value",
                        "pending_child_buff_count",
                        "active_child_buff_count",
                        "pending_and_active_child_buff_count",
                        "per_raw_damage_dealt",
                        "per_total_resolved_damage_dealt",
                        "per_resolved_shield_damage_dealt",
                        "per_resolved_armor_damage_dealt",
                        "per_resolved_hull_damage_dealt",
                        "per_resolved_planet_health_damage_dealt",
                        "per_damage_event_penetration",
                        "per_trigger_event_antimatter",
                        "per_current_antimatter",
                        "per_max_antimatter",
                        "per_planet_level",
                        "per_planet_future_level",
                        "per_planet_current_health_points",
                        "per_planet_max_health_points",
                        "per_planet_current_shield_points",
                        "per_planet_max_shield_points",
                        "per_planet_max_civilian_slots",
                        "per_planet_max_military_slots",
                        "per_planet_commerce_track_credit_income",
                        "per_planet_mining_track_metal_income",
                        "per_planet_mining_track_crystal_income",
                        "per_current_hull_points",
                        "per_missing_hull_points",
                        "per_max_hull_points",
                        "per_percent_missing_hull_points",
                        "per_current_crippled_hull_points",
                        "per_missing_crippled_hull_points",
                        "per_max_crippled_hull_points",
                        "per_percent_missing_crippled_hull_points",
                        "per_current_armor_points",
                        "per_missing_armor_points",
                        "per_max_armor_points",
                        "per_percent_missing_armor_points",
                        "per_current_shield_points",
                        "per_missing_shield_points",
                        "per_max_shield_points",
                        "source_ability_range",
                        "surface_radius",
                        "per_credit_price",
                        "per_metal_price",
                        "per_crystal_price",
                        "per_allied_player_in_gravity_well",
                        "per_enemy_unit_in_gravity_well",
                        "per_unit_level",
                        "per_build_or_virtual_supply",
                        "per_unit_id"
                    ]
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                }
            },
            "allOf": [
                {
                    "if": {
                        "properties": {
                            "transform_type": {
                                "const": "per_current_antimatter"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "transform_unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "transform_type": {
                                "const": "per_max_antimatter"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "transform_unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "transform_type": {
                                "const": "per_planet_level"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "transform_unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "transform_type": {
                                "const": "per_planet_future_level"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "transform_unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "transform_type": {
                                "const": "per_planet_current_health_points"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "transform_unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "transform_type": {
                                "const": "per_planet_max_health_points"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "transform_unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "transform_type": {
                                "const": "per_planet_current_shield_points"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "transform_unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "transform_type": {
                                "const": "per_planet_max_shield_points"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "transform_unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "transform_type": {
                                "const": "per_planet_max_civilian_slots"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "transform_unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "transform_type": {
                                "const": "per_planet_max_military_slots"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "transform_unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "transform_type": {
                                "const": "per_planet_commerce_track_credit_income"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "transform_unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "transform_type": {
                                "const": "per_planet_mining_track_metal_income"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "transform_unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "transform_type": {
                                "const": "per_planet_mining_track_crystal_income"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "transform_unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "transform_type": {
                                "const": "per_current_hull_points"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "transform_unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "transform_type": {
                                "const": "per_missing_hull_points"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "transform_unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "transform_type": {
                                "const": "per_max_hull_points"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "transform_unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "transform_type": {
                                "const": "per_percent_missing_hull_points"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "transform_unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "transform_type": {
                                "const": "per_current_crippled_hull_points"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "transform_unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "transform_type": {
                                "const": "per_missing_crippled_hull_points"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "transform_unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "transform_type": {
                                "const": "per_max_crippled_hull_points"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "transform_unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "transform_type": {
                                "const": "per_percent_missing_crippled_hull_points"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "transform_unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "transform_type": {
                                "const": "per_current_armor_points"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "transform_unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "transform_type": {
                                "const": "per_missing_armor_points"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "transform_unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "transform_type": {
                                "const": "per_max_armor_points"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "transform_unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "transform_type": {
                                "const": "per_percent_missing_armor_points"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "transform_unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "transform_type": {
                                "const": "per_current_shield_points"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "transform_unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "transform_type": {
                                "const": "per_missing_shield_points"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "transform_unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "transform_type": {
                                "const": "per_max_shield_points"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "transform_unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "transform_type": {
                                "const": "surface_radius"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "transform_unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "transform_type": {
                                "const": "per_credit_price"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "transform_unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "transform_type": {
                                "const": "per_metal_price"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "transform_unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "transform_type": {
                                "const": "per_crystal_price"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "transform_unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "transform_type": {
                                "const": "per_allied_player_in_gravity_well"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "transform_unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "transform_type": {
                                "const": "per_enemy_unit_in_gravity_well"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "transform_unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "transform_type": {
                                "const": "per_unit_level"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "transform_unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "transform_type": {
                                "const": "per_build_or_virtual_supply"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "transform_unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "transform_type": {
                                "const": "per_unit_id"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "transform_unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "transform_type": {
                                "const": "current_buff_memory_value"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "memory_float_variable_id": {
                                "type": "string"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "transform_type": {
                                "const": "operand_buff_memory_value"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "memory_float_variable_id": {
                                "type": "string"
                            }
                        }
                    }
                }
            ],
            "unevaluatedProperties": false
        },
        "unit_damage_effect_definition": {
            "type": "object",
            "properties": {
                "hull_percentage_threshold": {
                    "type": "number"
                },
                "max_count": {
                    "type": "number"
                },
                "particle_effect": {
                    "$ref": "#/$defs/particle_effect_definition_ptr"
                },
                "sound": {
                    "$ref": "#/$defs/sound_ptr"
                },
                "weight": {
                    "type": "number"
                }
            },
            "unevaluatedProperties": false
        },
        "unit_dialogue_definition": {
            "type": "object",
            "properties": {
                "ability_cooldown_is_not_completed": {
                    "type": "object",
                    "properties": {
                        "neutral": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/sound_ptr"
                            }
                        },
                        "scared": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/sound_ptr"
                            }
                        },
                        "smug": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/sound_ptr"
                            }
                        }
                    },
                    "unevaluatedProperties": false
                },
                "armor_down": {
                    "type": "object",
                    "properties": {
                        "neutral": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/sound_ptr"
                            }
                        },
                        "scared": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/sound_ptr"
                            }
                        },
                        "smug": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/sound_ptr"
                            }
                        }
                    },
                    "unevaluatedProperties": false
                },
                "attack_order_issued": {
                    "type": "object",
                    "properties": {
                        "neutral": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/sound_ptr"
                            }
                        },
                        "scared": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/sound_ptr"
                            }
                        },
                        "smug": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/sound_ptr"
                            }
                        }
                    },
                    "unevaluatedProperties": false
                },
                "became_crippled": {
                    "type": "object",
                    "properties": {
                        "neutral": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/sound_ptr"
                            }
                        },
                        "scared": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/sound_ptr"
                            }
                        },
                        "smug": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/sound_ptr"
                            }
                        }
                    },
                    "unevaluatedProperties": false
                },
                "cannot_hyperspace": {
                    "type": "object",
                    "properties": {
                        "neutral": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/sound_ptr"
                            }
                        },
                        "scared": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/sound_ptr"
                            }
                        },
                        "smug": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/sound_ptr"
                            }
                        }
                    },
                    "unevaluatedProperties": false
                },
                "destroyed": {
                    "type": "object",
                    "properties": {
                        "neutral": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/sound_ptr"
                            }
                        },
                        "scared": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/sound_ptr"
                            }
                        },
                        "smug": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/sound_ptr"
                            }
                        }
                    },
                    "unevaluatedProperties": false
                },
                "hyperspace_charge_started": {
                    "type": "object",
                    "properties": {
                        "neutral": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/sound_ptr"
                            }
                        },
                        "scared": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/sound_ptr"
                            }
                        },
                        "smug": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/sound_ptr"
                            }
                        }
                    },
                    "unevaluatedProperties": false
                },
                "insufficient_antimatter": {
                    "type": "object",
                    "properties": {
                        "neutral": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/sound_ptr"
                            }
                        },
                        "scared": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/sound_ptr"
                            }
                        },
                        "smug": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/sound_ptr"
                            }
                        }
                    },
                    "unevaluatedProperties": false
                },
                "joined_fleet": {
                    "type": "object",
                    "properties": {
                        "neutral": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/sound_ptr"
                            }
                        },
                        "scared": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/sound_ptr"
                            }
                        },
                        "smug": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/sound_ptr"
                            }
                        }
                    },
                    "unevaluatedProperties": false
                },
                "order_issued": {
                    "type": "object",
                    "properties": {
                        "neutral": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/sound_ptr"
                            }
                        },
                        "scared": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/sound_ptr"
                            }
                        },
                        "smug": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/sound_ptr"
                            }
                        }
                    },
                    "unevaluatedProperties": false
                },
                "retreat": {
                    "type": "object",
                    "properties": {
                        "neutral": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/sound_ptr"
                            }
                        },
                        "scared": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/sound_ptr"
                            }
                        },
                        "smug": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/sound_ptr"
                            }
                        }
                    },
                    "unevaluatedProperties": false
                },
                "selected": {
                    "type": "object",
                    "properties": {
                        "neutral": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/sound_ptr"
                            }
                        },
                        "scared": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/sound_ptr"
                            }
                        },
                        "smug": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/sound_ptr"
                            }
                        }
                    },
                    "unevaluatedProperties": false
                },
                "shields_down": {
                    "type": "object",
                    "properties": {
                        "neutral": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/sound_ptr"
                            }
                        },
                        "scared": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/sound_ptr"
                            }
                        },
                        "smug": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/sound_ptr"
                            }
                        }
                    },
                    "unevaluatedProperties": false
                },
                "ship_component_finished_building": {
                    "type": "object",
                    "properties": {
                        "neutral": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/sound_ptr"
                            }
                        },
                        "scared": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/sound_ptr"
                            }
                        },
                        "smug": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/sound_ptr"
                            }
                        }
                    },
                    "unevaluatedProperties": false
                },
                "spawned": {
                    "type": "object",
                    "properties": {
                        "neutral": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/sound_ptr"
                            }
                        },
                        "scared": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/sound_ptr"
                            }
                        },
                        "smug": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/sound_ptr"
                            }
                        }
                    },
                    "unevaluatedProperties": false
                }
            },
            "unevaluatedProperties": false
        },
        "unit_effects_definition": {
            "type": "object",
            "properties": {
                "damage_effects": {
                    "$ref": "#/$defs/unit_damage_effects_definition"
                },
                "effect_alias_bindings": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "alias_binding": {
                                "type": "object",
                                "properties": {
                                    "beam": {
                                        "type": "string"
                                    },
                                    "particle_effect": {
                                        "type": "string"
                                    },
                                    "sounds": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "unevaluatedProperties": false
                            },
                            "alias_name": {
                                "type": "string"
                            }
                        },
                        "unevaluatedProperties": false
                    }
                },
                "exhaust_effects": {
                    "$ref": "#/$defs/unit_exhaust_effects_definition"
                },
                "flair_effects": {
                    "$ref": "#/$defs/unit_flair_effect_definition"
                },
                "hyperspace_effects": {
                    "$ref": "#/$defs/unit_hyperspace_effects_definition"
                },
                "level_up_effect": {
                    "$ref": "#/$defs/particle_effect_definition_ptr"
                },
                "level_up_sound": {
                    "$ref": "#/$defs/sound_ptr"
                },
                "proxy_mesh_effect": {
                    "$ref": "#/$defs/particle_effect_definition_ptr"
                },
                "shield_effect": {
                    "$ref": "#/$defs/shield_effect_definition_ptr"
                }
            },
            "unevaluatedProperties": false
        },
        "unit_exhaust_effects_definition": {
            "type": "object",
            "properties": {
                "particle_effects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/$defs/unit_exhaust_particle_effect_definition"
                    }
                },
                "trail_effects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/$defs/unit_exhaust_trail_effect_definition"
                    }
                }
            },
            "unevaluatedProperties": false
        },
        "action_memory_float_variable_id": {
            "type": "string"
        },
        "target_filter_id": {
            "type": "string"
        },
        "action_value_ratio": {
            "type": "object",
            "properties": {
                "ratio_type": {
                    "type": "string",
                    "enum": [
                        "per_spell_power"
                    ]
                },
                "ratio_values": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                }
            },
            "unevaluatedProperties": false
        },
        "unit_exhaust_particle_effect_definition": {
            "type": "object",
            "properties": {
                "mesh_point": {
                    "$ref": "#/$defs/mesh_point_name"
                },
                "particle_effect": {
                    "$ref": "#/$defs/particle_effect_definition_ptr"
                }
            },
            "unevaluatedProperties": false
        },
        "unit_hyperspace_effects_definition": {
            "type": "object",
            "properties": {
                "charge_effect": {
                    "$ref": "#/$defs/particle_effect_definition_ptr"
                },
                "charge_effect_between_stars": {
                    "$ref": "#/$defs/particle_effect_definition_ptr"
                },
                "charge_effect_destabilized": {
                    "$ref": "#/$defs/particle_effect_definition_ptr"
                },
                "charge_sound": {
                    "$ref": "#/$defs/sound_ptr"
                },
                "enter_sound": {
                    "$ref": "#/$defs/sound_ptr"
                },
                "exit_effect": {
                    "$ref": "#/$defs/particle_effect_definition_ptr"
                },
                "exit_sound": {
                    "$ref": "#/$defs/sound_ptr"
                },
                "travel_effect": {
                    "$ref": "#/$defs/particle_effect_definition_ptr"
                },
                "travel_effect_between_stars": {
                    "$ref": "#/$defs/particle_effect_definition_ptr"
                },
                "travel_effect_destabilized": {
                    "$ref": "#/$defs/particle_effect_definition_ptr"
                }
            },
            "required": [
                "charge_effect",
                "charge_effect_between_stars",
                "charge_sound",
                "enter_sound",
                "exit_effect",
                "exit_sound",
                "travel_effect",
                "travel_effect_between_stars"
            ],
            "unevaluatedProperties": false
        },
        "unit_item_definition_ptr": {
            "type": "string"
        },
        "unit_move_sounds_definition": {
            "type": "object",
            "properties": {
                "engine": {
                    "$ref": "#/$defs/sound_ptr"
                },
                "hyperspace_travel": {
                    "$ref": "#/$defs/sound_ptr"
                },
                "none": {
                    "$ref": "#/$defs/sound_ptr"
                }
            },
            "unevaluatedProperties": false
        },
        "unit_name_group": {
            "type": "string"
        },
        "unit_sounds_definition": {
            "type": "object",
            "properties": {
                "dialogue": {
                    "$ref": "#/$defs/unit_dialogue_definition"
                },
                "move_sounds": {
                    "$ref": "#/$defs/unit_move_sounds_definition"
                }
            },
            "unevaluatedProperties": false
        },
        "time_action": {
            "type": "object",
            "properties": {
                "action_group": {
                    "$ref": "#/$defs/action_group"
                },
                "execution_interval_count_value": {
                    "description": "Maximum number of executions. If not specified will execute infinitely.",
                    "$ref": "#/$defs/action_value_id"
                },
                "execution_interval_value": {
                    "description": "Interval between each execution. If not specified will be executed every update.",
                    "$ref": "#/$defs/action_value_id"
                },
                "executions_per_interval_value": {
                    "description": "How many executions per interval. Default to 1.",
                    "$ref": "#/$defs/action_value_id"
                },
                "first_action_delay_time_value": {
                    "description": "Delay before first execution.",
                    "$ref": "#/$defs/action_value_id"
                }
            },
            "required": [
                "action_group"
            ],
            "unevaluatedProperties": false
        },
        "buff_unit_modifier_id": {
            "type": "string"
        },
        "buff_planet_modifier_id": {
            "type": "string"
        },
        "buff_weapon_modifier_id": {
            "type": "string"
        },
        "action": {
            "type": "object",
            "properties": {
                "action_id": {
                    "description": "optional reference to an action in action_data_source. only applies if this action is part of an action_group!",
                    "type": "string"
                },
                "action_type": {
                    "type": "string",
                    "enum": [
                        "abort_make_dead",
                        "augment_damage",
                        "change_ability_charges",
                        "change_ability_is_empowered",
                        "change_ability_remaining_cooldown",
                        "change_buff_memory_float_value",
                        "change_buff_memory_unit_value",
                        "make_buff_dead",
                        "start_buff_effect",
                        "stop_buff_effect",
                        "give_assets",
                        "give_exotics",
                        "give_influence_points",
                        "give_mana",
                        "prevent_damage",
                        "resurrect_units_in_gravity_well_of_unit",
                        "add_notification",
                        "start_attract_to_unit",
                        "stop_attract_to_unit",
                        "start_brake_to_stop",
                        "stop_brake_to_stop",
                        "start_repel_from_unit",
                        "stop_repel_from_unit",
                        "start_force_attack",
                        "stop_force_attack",
                        "use_position_operators_on_single_position",
                        "use_position_operators_on_vector_of_positions",
                        "use_unit_operators_on_single_unit",
                        "use_unit_operators_on_chained_units",
                        "use_unit_operators_on_child_strikecraft_of_unit",
                        "use_unit_operators_on_units_in_gravity_well_of_unit",
                        "use_unit_operators_on_phase_lanes",
                        "use_unit_operators_on_gravity_wells",
                        "use_unit_operators_on_units_in_radius_of_unit",
                        "use_unit_operators_on_units_in_arc_of_unit",
                        "use_unit_operators_on_units_in_phase_lanes",
                        "use_unit_operators_on_closest_owned_planet",
                        "use_unit_operators_on_units_owned_by_player",
                        "use_unit_operators_on_units_with_child_buffs_of_parent_buff"
                    ]
                },
                "constraint": {
                    "$ref": "#/$defs/action_constraint"
                }
            },
            "anyOf": [
                {
                    "if": {
                        "properties": {
                            "action_type": {
                                "const": "abort_make_dead"
                            }
                        }
                    },
                    "then": {}
                },
                {
                    "if": {
                        "properties": {
                            "action_type": {
                                "const": "augment_damage"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "bonus_damage_value": {
                                "$ref": "#/$defs/action_value_id"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "action_type": {
                                "const": "change_ability_charges"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "ability": {
                                "$ref": "#/$defs/action_ability"
                            },
                            "math_operators": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/$defs/action_math_operator"
                                }
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "action_type": {
                                "const": "change_ability_is_empowered"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "ability": {
                                "$ref": "#/$defs/action_ability"
                            },
                            "is_empowered": {
                                "type": "boolean"
                            }
                        },
                        "required": [
                            "ability",
                            "is_empowered"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "action_type": {
                                "const": "change_ability_remaining_cooldown"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "ability": {
                                "$ref": "#/$defs/action_ability"
                            },
                            "change_type": {
                                "$ref": "#/$defs/ability_cooldown_change_type"
                            },
                            "cooldown_type": {
                                "description": "default=active",
                                "$ref": "#/$defs/ability_cooldown_type"
                            },
                            "reduction_value": {
                                "$ref": "#/$defs/action_value_id"
                            }
                        },
                        "required": [
                            "ability",
                            "change_type",
                            "reduction_value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "action_type": {
                                "const": "change_buff_memory_float_value"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "buff": {
                                "description": "default=current_buff",
                                "$ref": "#/$defs/action_buff"
                            },
                            "float_variable": {
                                "$ref": "#/$defs/action_memory_float_variable_id"
                            },
                            "math_operators": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/$defs/action_math_operator"
                                }
                            }
                        },
                        "required": [
                            "float_variable",
                            "math_operators"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "action_type": {
                                "const": "change_buff_memory_unit_value"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "buff": {
                                "description": "default=current_buff",
                                "$ref": "#/$defs/action_buff"
                            },
                            "new_unit_value": {
                                "$ref": "#/$defs/action_unit"
                            },
                            "unit_variable": {
                                "$ref": "#/$defs/action_memory_unit_variable_id"
                            }
                        },
                        "required": [
                            "new_unit_value",
                            "unit_variable"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "action_type": {
                                "const": "make_buff_dead"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "buff": {
                                "description": "default=current_buff",
                                "$ref": "#/$defs/action_buff"
                            },
                            "buff_constraint": {
                                "$ref": "#/$defs/action_constraint"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "action_type": {
                                "const": "start_buff_effect"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "effect_definition": {
                                "$ref": "#/$defs/action_effect_definition"
                            },
                            "is_looping": {
                                "description": "default=true",
                                "type": "boolean"
                            }
                        },
                        "required": [
                            "effect_definition"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "action_type": {
                                "const": "stop_buff_effect"
                            }
                        }
                    },
                    "then": {}
                },
                {
                    "if": {
                        "properties": {
                            "action_type": {
                                "const": "give_assets"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "asset_type": {
                                "$ref": "#/$defs/asset_type"
                            },
                            "context": {
                                "description": "default=action",
                                "$ref": "#/$defs/player_asset_delta_source"
                            },
                            "give_amount_id": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "log_different_fixtures_as_unique_events": {
                                "description": "default=false",
                                "type": "boolean"
                            },
                            "player": {
                                "$ref": "#/$defs/action_player"
                            }
                        },
                        "required": [
                            "asset_type",
                            "give_amount_id"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "action_type": {
                                "const": "give_exotics"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "context": {
                                "description": "default=action",
                                "$ref": "#/$defs/give_exotic_context"
                            },
                            "exotics": {
                                "$ref": "#/$defs/action_exotics"
                            },
                            "player": {
                                "$ref": "#/$defs/action_player"
                            }
                        },
                        "required": [
                            "exotics"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "action_type": {
                                "const": "give_influence_points"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "influence_points_given_value": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "player": {
                                "$ref": "#/$defs/action_player"
                            }
                        },
                        "required": [
                            "influence_points_given_value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "action_type": {
                                "const": "give_mana"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "mana_given_value": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "player": {
                                "$ref": "#/$defs/action_player"
                            }
                        },
                        "required": [
                            "mana_given_value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "action_type": {
                                "const": "prevent_damage"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "damage_prevented_value": {
                                "$ref": "#/$defs/action_value_id"
                            }
                        },
                        "required": [
                            "damage_prevented_value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "action_type": {
                                "const": "resurrect_units_in_gravity_well_of_unit"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "auto_add_to_fleet_unit": {
                                "description": "default=first_spawner",
                                "$ref": "#/$defs/action_unit"
                            },
                            "buff_on_resurrected_units": {
                                "$ref": "#/$defs/buff_definition_ptr"
                            },
                            "constrain_to_available_supply": {
                                "description": "default=true",
                                "type": "boolean"
                            },
                            "copy_parent_buff_memory_values": {
                                "description": "default=false",
                                "type": "boolean"
                            },
                            "dead_units_player": {
                                "$ref": "#/$defs/action_player"
                            },
                            "gravity_well_origin_unit": {
                                "$ref": "#/$defs/action_unit"
                            },
                            "initial_float_values": {
                                "$ref": "#/$defs/action_memory_float_value_vector"
                            },
                            "max_supply_value": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "max_target_count_value": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "override_ownership_unit": {
                                "$ref": "#/$defs/action_unit"
                            },
                            "resurrection_constraint": {
                                "$ref": "#/$defs/action_constraint"
                            },
                            "resurrection_sort": {
                                "type": "object",
                                "properties": {
                                    "sort_steps": {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "sort_order": {
                                                    "type": "string",
                                                    "enum": [
                                                        "ascending",
                                                        "descending"
                                                    ]
                                                },
                                                "sort_type": {
                                                    "type": "string",
                                                    "enum": [
                                                        "build_or_virtual_supply",
                                                        "distance_to_unit"
                                                    ]
                                                }
                                            },
                                            "required": [
                                                "sort_order",
                                                "sort_type"
                                            ],
                                            "if": {
                                                "properties": {
                                                    "sort_type": {
                                                        "const": "distance_to_unit"
                                                    }
                                                }
                                            },
                                            "then": {
                                                "properties": {
                                                    "distance_reference_unit": {
                                                        "$ref": "#/$defs/action_unit"
                                                    }
                                                },
                                                "required": [
                                                    "distance_reference_unit"
                                                ]
                                            },
                                            "unevaluatedProperties": false
                                        }
                                    }
                                },
                                "unevaluatedProperties": false
                            },
                            "source_unit": {
                                "description": "default=current_spawner",
                                "$ref": "#/$defs/action_unit"
                            },
                            "specific_unit_ids": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/$defs/action_value_id"
                                }
                            },
                            "unit_types_to_resurrect": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/$defs/target_filter_unit_type"
                                }
                            }
                        },
                        "required": [
                            "dead_units_player",
                            "gravity_well_origin_unit",
                            "unit_types_to_resurrect"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "action_type": {
                                "const": "add_notification"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "notification_type": {
                                "type": "string",
                                "enum": [
                                    "planet_conversion_started",
                                    "planet_conversion_colonized"
                                ]
                            },
                            "planet": {
                                "$ref": "#/$defs/action_unit"
                            }
                        },
                        "required": [
                            "notification_type"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "action_type": {
                                "const": "start_attract_to_unit"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "attractor_unit": {
                                "$ref": "#/$defs/action_unit"
                            },
                            "max_linear_speed_value": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "time_to_max_linear_speed_value": {
                                "$ref": "#/$defs/action_value_id"
                            }
                        },
                        "required": [
                            "attractor_unit",
                            "max_linear_speed_value",
                            "time_to_max_linear_speed_value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "action_type": {
                                "const": "stop_attract_to_unit"
                            }
                        }
                    },
                    "then": {}
                },
                {
                    "if": {
                        "properties": {
                            "action_type": {
                                "const": "start_brake_to_stop"
                            }
                        }
                    },
                    "then": {}
                },
                {
                    "if": {
                        "properties": {
                            "action_type": {
                                "const": "stop_brake_to_stop"
                            }
                        }
                    },
                    "then": {}
                },
                {
                    "if": {
                        "properties": {
                            "action_type": {
                                "const": "start_repel_from_unit"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "repulsion_origin_unit": {
                                "$ref": "#/$defs/action_unit"
                            },
                            "starting_linear_speed_value": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "terminal_linear_speed_value": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "time_to_terminal_linear_speed_value": {
                                "$ref": "#/$defs/action_value_id"
                            }
                        },
                        "required": [
                            "repulsion_origin_unit",
                            "starting_linear_speed_value",
                            "terminal_linear_speed_value",
                            "time_to_terminal_linear_speed_value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "action_type": {
                                "const": "stop_repel_from_unit"
                            }
                        }
                    },
                    "then": {}
                },
                {
                    "if": {
                        "properties": {
                            "action_type": {
                                "const": "start_force_attack"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "target_unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        },
                        "required": [
                            "target_unit"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "action_type": {
                                "const": "stop_force_attack"
                            }
                        }
                    },
                    "then": {}
                },
                {
                    "if": {
                        "properties": {
                            "action_type": {
                                "const": "use_position_operators_on_single_position"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "position": {
                                "$ref": "#/$defs/action_position"
                            },
                            "position_operators": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/$defs/action_position_operator"
                                }
                            },
                            "travel_time": {
                                "$ref": "#/$defs/action_travel_time"
                            }
                        },
                        "required": [
                            "position",
                            "position_operators"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "action_type": {
                                "const": "use_position_operators_on_vector_of_positions"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "position_operators": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/$defs/action_position_operator"
                                }
                            },
                            "positions": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/$defs/action_position"
                                }
                            },
                            "travel_time": {
                                "$ref": "#/$defs/action_travel_time"
                            }
                        },
                        "required": [
                            "position_operators",
                            "positions"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "action_type": {
                                "const": "use_unit_operators_on_single_unit"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "constraint_not_satisified_operators": {
                                "description": "operators to execute if the operators_constraint is NOT satisified",
                                "type": "array",
                                "items": {
                                    "$ref": "#/$defs/action_unit_operator"
                                }
                            },
                            "destination_unit": {
                                "$ref": "#/$defs/action_unit"
                            },
                            "operators": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/$defs/action_unit_operator"
                                }
                            },
                            "operators_constraint": {
                                "$ref": "#/$defs/action_constraint"
                            },
                            "source_unit": {
                                "description": "default=current_spawner",
                                "$ref": "#/$defs/action_unit"
                            },
                            "travel_time": {
                                "$ref": "#/$defs/action_travel_time"
                            }
                        },
                        "required": [
                            "operators"
                        ],
                        "allOf": [
                            {
                                "if": {
                                    "properties": {
                                        "destination_unit": {
                                            "type": "object",
                                            "properties": {
                                                "unit_type": {
                                                    "const": "target"
                                                }
                                            },
                                            "unevaluatedProperties": false
                                        }
                                    }
                                },
                                "then": {
                                    "properties": {
                                        "range_value": {
                                            "$ref": "#/$defs/action_value_id"
                                        }
                                    }
                                }
                            }
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "action_type": {
                                "const": "use_unit_operators_on_chained_units"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "chain_delay": {
                                "type": "number",
                                "minimum": 0.0
                            },
                            "chain_range_value": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "chain_target_filter_id": {
                                "$ref": "#/$defs/target_filter_id"
                            },
                            "constraint_not_satisified_operators": {
                                "description": "operators to execute if the operators_constraint is NOT satisified",
                                "type": "array",
                                "items": {
                                    "$ref": "#/$defs/action_unit_operator"
                                }
                            },
                            "first_destination_unit": {
                                "$ref": "#/$defs/action_unit"
                            },
                            "first_source_unit": {
                                "$ref": "#/$defs/action_unit"
                            },
                            "max_target_count_value": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "operators": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/$defs/action_unit_operator"
                                }
                            },
                            "operators_constraint": {
                                "$ref": "#/$defs/action_constraint"
                            },
                            "target_sort": {
                                "$ref": "#/$defs/action_unit_sort"
                            },
                            "travel_time": {
                                "$ref": "#/$defs/action_travel_time"
                            }
                        },
                        "required": [
                            "chain_delay",
                            "chain_range_value",
                            "chain_target_filter_id",
                            "first_destination_unit",
                            "first_source_unit",
                            "operators"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "action_type": {
                                "const": "use_unit_operators_on_child_strikecraft_of_unit"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "constraint_not_satisified_operators": {
                                "description": "operators to execute if the operators_constraint is NOT satisified",
                                "type": "array",
                                "items": {
                                    "$ref": "#/$defs/action_unit_operator"
                                }
                            },
                            "operators": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/$defs/action_unit_operator"
                                }
                            },
                            "operators_constraint": {
                                "$ref": "#/$defs/action_constraint"
                            },
                            "source_unit": {
                                "description": "default=current_spawner",
                                "$ref": "#/$defs/action_unit"
                            },
                            "strikecraft_carrier_unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        },
                        "required": [
                            "operators",
                            "strikecraft_carrier_unit"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "action_type": {
                                "const": "use_unit_operators_on_units_in_gravity_well_of_unit"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "gravity_well_origin_unit": {
                                "$ref": "#/$defs/action_unit"
                            },
                            "max_target_count_value": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "operators": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "buff": {
                                            "type": "string"
                                        },
                                        "constraint": {
                                            "type": "object",
                                            "properties": {
                                                "constraint_type": {
                                                    "type": "string",
                                                    "enum": [
                                                        "none",
                                                        "all_finite_time_actions_done",
                                                        "buff_has_mutation",
                                                        "buff_time_elapsed",
                                                        "buff_made_dead_has_context",
                                                        "damage_can_be_propagated",
                                                        "damage_has_damage_source",
                                                        "damage_has_weapon_tag",
                                                        "distance_between_units_comparison",
                                                        "has_resurrectable_units_in_gravity_well",
                                                        "has_enemy_units_in_gravity_well",
                                                        "has_valid_targets_in_radius",
                                                        "is_empowered",
                                                        "player_has_available_supply",
                                                        "players_have_alliance_relationship",
                                                        "random_chance",
                                                        "research_prerequisites_are_met",
                                                        "unit_comparison",
                                                        "unit_passes_target_filter",
                                                        "unit_passes_unit_constraint",
                                                        "value_comparison",
                                                        "weapon_has_weapon_tag",
                                                        "composite_not",
                                                        "composite_and",
                                                        "composite_or"
                                                    ]
                                                }
                                            },
                                            "required": [
                                                "constraint_type"
                                            ],
                                            "allOf": [
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "constraint_type": {
                                                                "const": "none"
                                                            }
                                                        }
                                                    },
                                                    "then": {}
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "constraint_type": {
                                                                "const": "all_finite_time_actions_done"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "properties": {
                                                            "buff": {
                                                                "$ref": "#/$defs/action_constraint_buff_type"
                                                            }
                                                        }
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "constraint_type": {
                                                                "const": "buff_has_mutation"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "properties": {
                                                            "buff": {
                                                                "description": "default=current_buff",
                                                                "$ref": "#/$defs/action_constraint_buff_type"
                                                            },
                                                            "mutation": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "mutation"
                                                        ]
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "constraint_type": {
                                                                "const": "buff_time_elapsed"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "properties": {
                                                            "buff": {
                                                                "description": "default=current_buff",
                                                                "$ref": "#/$defs/action_constraint_buff_type"
                                                            },
                                                            "duration_value": {
                                                                "$ref": "#/$defs/action_value_id"
                                                            }
                                                        },
                                                        "required": [
                                                            "duration_value"
                                                        ]
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "constraint_type": {
                                                                "const": "buff_made_dead_has_context"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "properties": {
                                                            "buff_made_dead_context": {
                                                                "type": "string",
                                                                "enum": [
                                                                    "duration_expired",
                                                                    "all_finite_time_actions_done",
                                                                    "owner_unit_made_dead",
                                                                    "necessary_parent_buff_made_dead",
                                                                    "necessary_child_buff_made_dead",
                                                                    "necessary_source_ability_released",
                                                                    "necessary_source_ability_slot_made_unbuilt",
                                                                    "watched_buff_ability_stopped",
                                                                    "distance_to_parent_buff_exceeded",
                                                                    "made_dead_by_action",
                                                                    "stack_limit_exceeded",
                                                                    "no_longer_affected_by_buff_provider_research",
                                                                    "passive_action_not_operational",
                                                                    "current_spawner_ownership_changed"
                                                                ]
                                                            }
                                                        },
                                                        "required": [
                                                            "buff_made_dead_context"
                                                        ]
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "constraint_type": {
                                                                "const": "damage_can_be_propagated"
                                                            }
                                                        }
                                                    },
                                                    "then": {}
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "constraint_type": {
                                                                "const": "damage_has_damage_source"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "properties": {
                                                            "damage_source": {
                                                                "type": "string",
                                                                "enum": [
                                                                    "ability",
                                                                    "debug",
                                                                    "weapon"
                                                                ]
                                                            }
                                                        },
                                                        "required": [
                                                            "damage_source"
                                                        ]
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "constraint_type": {
                                                                "const": "damage_has_weapon_tag"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "properties": {
                                                            "weapon_tag": {
                                                                "$ref": "#/$defs/weapon_tag"
                                                            }
                                                        },
                                                        "required": [
                                                            "weapon_tag"
                                                        ]
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "constraint_type": {
                                                                "const": "distance_between_units_comparison"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "properties": {
                                                            "compare_value": {
                                                                "$ref": "#/$defs/action_value_id"
                                                            },
                                                            "comparison_type": {
                                                                "$ref": "#/$defs/math_comparison_operator"
                                                            },
                                                            "unit_a": {
                                                                "$ref": "#/$defs/action_unit"
                                                            },
                                                            "unit_b": {
                                                                "$ref": "#/$defs/action_unit"
                                                            }
                                                        },
                                                        "required": [
                                                            "compare_value",
                                                            "comparison_type",
                                                            "unit_a",
                                                            "unit_b"
                                                        ]
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "constraint_type": {
                                                                "const": "has_resurrectable_units_in_gravity_well"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "properties": {
                                                            "dead_units_player": {
                                                                "$ref": "#/$defs/action_player"
                                                            },
                                                            "gravity_well_reference_unit": {
                                                                "$ref": "#/$defs/action_unit"
                                                            },
                                                            "min_supply_value": {
                                                                "$ref": "#/$defs/action_value_id"
                                                            },
                                                            "min_target_count_value": {
                                                                "$ref": "#/$defs/action_value_id"
                                                            },
                                                            "unit_types_to_resurrect": {
                                                                "type": "array",
                                                                "items": {
                                                                    "$ref": "#/$defs/target_filter_unit_type"
                                                                }
                                                            }
                                                        },
                                                        "required": [
                                                            "dead_units_player",
                                                            "gravity_well_reference_unit",
                                                            "unit_types_to_resurrect"
                                                        ]
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "constraint_type": {
                                                                "const": "has_enemy_units_in_gravity_well"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "properties": {
                                                            "gravity_well_reference_unit": {
                                                                "$ref": "#/$defs/action_unit"
                                                            },
                                                            "target_filter_id": {
                                                                "$ref": "#/$defs/target_filter_id"
                                                            }
                                                        },
                                                        "required": [
                                                            "gravity_well_reference_unit",
                                                            "target_filter_id"
                                                        ]
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "constraint_type": {
                                                                "const": "has_valid_targets_in_radius"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "properties": {
                                                            "radius_origin_unit": {
                                                                "$ref": "#/$defs/action_unit"
                                                            },
                                                            "radius_value": {
                                                                "$ref": "#/$defs/action_value_id"
                                                            },
                                                            "target_count_value": {
                                                                "$ref": "#/$defs/action_value_id"
                                                            },
                                                            "target_filter_id": {
                                                                "$ref": "#/$defs/target_filter_id"
                                                            }
                                                        },
                                                        "required": [
                                                            "radius_origin_unit",
                                                            "radius_value",
                                                            "target_count_value",
                                                            "target_filter_id"
                                                        ]
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "constraint_type": {
                                                                "const": "is_empowered"
                                                            }
                                                        }
                                                    },
                                                    "then": {}
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "constraint_type": {
                                                                "const": "player_has_available_supply"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "properties": {
                                                            "include_future_supply": {
                                                                "description": "default=false",
                                                                "type": "boolean"
                                                            },
                                                            "minimum_available_supply": {
                                                                "$ref": "#/$defs/action_value_id"
                                                            },
                                                            "player": {
                                                                "$ref": "#/$defs/action_player"
                                                            }
                                                        },
                                                        "required": [
                                                            "player"
                                                        ]
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "constraint_type": {
                                                                "const": "players_have_alliance_relationship"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "properties": {
                                                            "player_a": {
                                                                "$ref": "#/$defs/action_player"
                                                            },
                                                            "player_b": {
                                                                "$ref": "#/$defs/action_player"
                                                            },
                                                            "relationship_type": {
                                                                "type": "string",
                                                                "enum": [
                                                                    "self",
                                                                    "ally",
                                                                    "enemy",
                                                                    "none"
                                                                ]
                                                            }
                                                        },
                                                        "required": [
                                                            "player_a",
                                                            "player_b",
                                                            "relationship_type"
                                                        ]
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "constraint_type": {
                                                                "const": "random_chance"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "properties": {
                                                            "chance_value": {
                                                                "description": "0=constraint will never pass , 1=constraint will always pass",
                                                                "$ref": "#/$defs/action_value_id"
                                                            }
                                                        },
                                                        "required": [
                                                            "chance_value"
                                                        ]
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "constraint_type": {
                                                                "const": "research_prerequisites_are_met"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "properties": {
                                                            "player": {
                                                                "$ref": "#/$defs/action_player"
                                                            },
                                                            "prerequisites": {
                                                                "type": "object",
                                                                "properties": {
                                                                    "sets": {
                                                                        "type": "array",
                                                                        "items": {
                                                                            "type": "object",
                                                                            "properties": {
                                                                                "research_subject_definition_ptr": {
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "research_subject_definition_ptr"
                                                                            ],
                                                                            "unevaluatedProperties": false
                                                                        }
                                                                    }
                                                                },
                                                                "unevaluatedProperties": false
                                                            }
                                                        },
                                                        "required": [
                                                            "player",
                                                            "prerequisites"
                                                        ]
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "constraint_type": {
                                                                "const": "unit_comparison"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "properties": {
                                                            "unit_a": {
                                                                "$ref": "#/$defs/action_unit"
                                                            },
                                                            "unit_b": {
                                                                "$ref": "#/$defs/action_unit"
                                                            }
                                                        },
                                                        "required": [
                                                            "unit_a",
                                                            "unit_b"
                                                        ]
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "constraint_type": {
                                                                "const": "unit_passes_target_filter"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "properties": {
                                                            "target_filter_id": {
                                                                "$ref": "#/$defs/target_filter_id"
                                                            },
                                                            "unit": {
                                                                "$ref": "#/$defs/action_unit"
                                                            }
                                                        },
                                                        "required": [
                                                            "target_filter_id",
                                                            "unit"
                                                        ]
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "constraint_type": {
                                                                "const": "unit_passes_unit_constraint"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "properties": {
                                                            "unit": {
                                                                "$ref": "#/$defs/action_unit"
                                                            },
                                                            "unit_constraint": {
                                                                "$ref": "#/$defs/unit_constraint"
                                                            }
                                                        },
                                                        "required": [
                                                            "unit",
                                                            "unit_constraint"
                                                        ]
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "constraint_type": {
                                                                "const": "value_comparison"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "properties": {
                                                            "comparison_type": {
                                                                "$ref": "#/$defs/math_comparison_operator"
                                                            },
                                                            "value_a": {
                                                                "$ref": "#/$defs/action_value_id"
                                                            },
                                                            "value_b": {
                                                                "$ref": "#/$defs/action_value_id"
                                                            }
                                                        },
                                                        "required": [
                                                            "comparison_type",
                                                            "value_a",
                                                            "value_b"
                                                        ]
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "constraint_type": {
                                                                "const": "weapon_has_weapon_tag"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "properties": {
                                                            "any_weapon_tags": {
                                                                "$ref": "#/$defs/weapon_tag_set"
                                                            },
                                                            "weapon": {
                                                                "$ref": "#/$defs/action_weapon_definition"
                                                            }
                                                        },
                                                        "required": [
                                                            "weapon"
                                                        ]
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "constraint_type": {
                                                                "const": "composite_not"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "properties": {
                                                            "constraint": {
                                                                "$ref": "#/$defs/action_constraint"
                                                            }
                                                        },
                                                        "required": [
                                                            "constraint"
                                                        ]
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "constraint_type": {
                                                                "const": "composite_and"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "properties": {
                                                            "constraints": {
                                                                "type": "array",
                                                                "items": {
                                                                    "$ref": "#/$defs/action_constraint"
                                                                },
                                                                "minItems": 2,
                                                                "maxItems": 5
                                                            }
                                                        },
                                                        "required": [
                                                            "constraints"
                                                        ]
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "constraint_type": {
                                                                "const": "composite_or"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "properties": {
                                                            "constraints": {
                                                                "type": "array",
                                                                "items": {
                                                                    "$ref": "#/$defs/action_constraint"
                                                                },
                                                                "minItems": 2,
                                                                "maxItems": 5
                                                            }
                                                        },
                                                        "required": [
                                                            "constraints"
                                                        ]
                                                    }
                                                }
                                            ],
                                            "unevaluatedProperties": false
                                        },
                                        "operator_type": {
                                            "type": "string"
                                        }
                                    },
                                    "unevaluatedProperties": false
                                }
                            },
                            "source_unit": {
                                "description": "default=current_spawner",
                                "$ref": "#/$defs/action_unit"
                            },
                            "target_sort": {
                                "$ref": "#/$defs/action_unit_sort"
                            }
                        },
                        "required": [
                            "gravity_well_origin_unit"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "action_type": {
                                "const": "use_unit_operators_on_phase_lanes"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "constraint_not_satisified_operators": {
                                "description": "operators to execute if the operators_constraint is NOT satisified",
                                "type": "array",
                                "items": {
                                    "$ref": "#/$defs/action_unit_operator"
                                }
                            },
                            "gravity_well_origin_unit": {
                                "$ref": "#/$defs/action_unit"
                            },
                            "max_jump_distance_value": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "operators": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/$defs/action_unit_operator"
                                }
                            },
                            "operators_constraint": {
                                "$ref": "#/$defs/action_constraint"
                            }
                        },
                        "required": [
                            "gravity_well_origin_unit",
                            "max_jump_distance_value",
                            "operators"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "action_type": {
                                "const": "use_unit_operators_on_gravity_wells"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "constraint_not_satisified_operators": {
                                "description": "operators to execute if the operators_constraint is NOT satisified",
                                "type": "array",
                                "items": {
                                    "$ref": "#/$defs/action_unit_operator"
                                }
                            },
                            "gravity_well_origin_unit": {
                                "$ref": "#/$defs/action_unit"
                            },
                            "max_jump_distance_value": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "operators": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/$defs/action_unit_operator"
                                }
                            },
                            "operators_constraint": {
                                "$ref": "#/$defs/action_constraint"
                            }
                        },
                        "required": [
                            "gravity_well_origin_unit",
                            "max_jump_distance_value",
                            "operators"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "action_type": {
                                "const": "use_unit_operators_on_units_in_radius_of_unit"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "constraint_not_satisified_operators": {
                                "description": "operators to execute if the operators_constraint is NOT satisified",
                                "type": "array",
                                "items": {
                                    "$ref": "#/$defs/action_unit_operator"
                                }
                            },
                            "include_radius_origin_unit": {
                                "description": "default=true",
                                "type": "boolean"
                            },
                            "include_y_axis_in_radius_check": {
                                "description": "default=true",
                                "type": "boolean"
                            },
                            "max_target_count_value": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "operators": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/$defs/action_unit_operator"
                                }
                            },
                            "operators_constraint": {
                                "$ref": "#/$defs/action_constraint"
                            },
                            "radius_origin_unit": {
                                "$ref": "#/$defs/action_unit"
                            },
                            "radius_value": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "target_sort": {
                                "$ref": "#/$defs/action_unit_sort"
                            },
                            "travel_time": {
                                "$ref": "#/$defs/action_travel_time"
                            }
                        },
                        "required": [
                            "operators",
                            "radius_origin_unit",
                            "radius_value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "action_type": {
                                "const": "use_unit_operators_on_units_in_arc_of_unit"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "arc_angle_value": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "arc_direction": {
                                "$ref": "#/$defs/action_direction"
                            },
                            "arc_origin_unit": {
                                "$ref": "#/$defs/action_unit"
                            },
                            "arc_radius_value": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "constraint_not_satisified_operators": {
                                "description": "operators to execute if the operators_constraint is NOT satisified",
                                "type": "array",
                                "items": {
                                    "$ref": "#/$defs/action_unit_operator"
                                }
                            },
                            "max_target_count_value": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "operators": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/$defs/action_unit_operator"
                                }
                            },
                            "operators_constraint": {
                                "$ref": "#/$defs/action_constraint"
                            },
                            "target_sort": {
                                "$ref": "#/$defs/action_unit_sort"
                            },
                            "travel_time": {
                                "$ref": "#/$defs/action_travel_time"
                            }
                        },
                        "required": [
                            "arc_angle_value",
                            "arc_direction",
                            "arc_origin_unit",
                            "operators"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "action_type": {
                                "const": "use_unit_operators_on_units_in_phase_lanes"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "constraint_not_satisified_operators": {
                                "description": "operators to execute if the operators_constraint is NOT satisified",
                                "type": "array",
                                "items": {
                                    "$ref": "#/$defs/action_unit_operator"
                                }
                            },
                            "gravity_well_origin_unit": {
                                "$ref": "#/$defs/action_unit"
                            },
                            "operators": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/$defs/action_unit_operator"
                                }
                            },
                            "operators_constraint": {
                                "$ref": "#/$defs/action_constraint"
                            },
                            "source_unit": {
                                "description": "default=current_spawner",
                                "$ref": "#/$defs/action_unit"
                            },
                            "traveling_from_gravity_well_origin": {
                                "type": "boolean"
                            },
                            "traveling_to_gravity_well_origin": {
                                "type": "boolean"
                            }
                        },
                        "required": [
                            "gravity_well_origin_unit",
                            "operators"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "action_type": {
                                "const": "use_unit_operators_on_closest_owned_planet"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "constraint_not_satisified_operators": {
                                "description": "operators to execute if the operators_constraint is NOT satisified",
                                "type": "array",
                                "items": {
                                    "$ref": "#/$defs/action_unit_operator"
                                }
                            },
                            "operators": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/$defs/action_unit_operator"
                                }
                            },
                            "operators_constraint": {
                                "$ref": "#/$defs/action_constraint"
                            },
                            "origin_unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        },
                        "required": [
                            "operators",
                            "origin_unit"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "action_type": {
                                "const": "use_unit_operators_on_units_owned_by_player"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "constraint_not_satisified_operators": {
                                "description": "operators to execute if the operators_constraint is NOT satisified",
                                "type": "array",
                                "items": {
                                    "$ref": "#/$defs/action_unit_operator"
                                }
                            },
                            "operators": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/$defs/action_unit_operator"
                                }
                            },
                            "operators_constraint": {
                                "$ref": "#/$defs/action_constraint"
                            },
                            "player": {
                                "$ref": "#/$defs/action_player"
                            }
                        },
                        "required": [
                            "operators",
                            "player"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "action_type": {
                                "const": "use_unit_operators_on_units_with_child_buffs_of_parent_buff"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "constraint_not_satisified_operators": {
                                "description": "operators to execute if the operators_constraint is NOT satisified",
                                "type": "array",
                                "items": {
                                    "$ref": "#/$defs/action_unit_operator"
                                }
                            },
                            "include_current_child_buff_unit": {
                                "description": "default=false",
                                "type": "boolean"
                            },
                            "max_target_count_value": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "operators": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/$defs/action_unit_operator"
                                }
                            },
                            "operators_constraint": {
                                "$ref": "#/$defs/action_constraint"
                            },
                            "target_sort": {
                                "$ref": "#/$defs/action_unit_sort"
                            },
                            "travel_time": {
                                "$ref": "#/$defs/action_travel_time"
                            }
                        },
                        "required": [
                            "operators"
                        ]
                    }
                }
            ],
            "unevaluatedProperties": false
        },
        "action_constraint": {
            "type": "object",
            "properties": {
                "constraint_type": {
                    "type": "string",
                    "enum": [
                        "none",
                        "all_finite_time_actions_done",
                        "buff_has_mutation",
                        "buff_time_elapsed",
                        "buff_made_dead_has_context",
                        "damage_can_be_propagated",
                        "damage_has_damage_source",
                        "damage_has_weapon_tag",
                        "distance_between_units_comparison",
                        "has_resurrectable_units_in_gravity_well",
                        "has_enemy_units_in_gravity_well",
                        "has_valid_targets_in_radius",
                        "is_empowered",
                        "player_has_available_supply",
                        "players_have_alliance_relationship",
                        "random_chance",
                        "research_prerequisites_are_met",
                        "unit_comparison",
                        "unit_passes_target_filter",
                        "unit_passes_unit_constraint",
                        "value_comparison",
                        "weapon_has_weapon_tag",
                        "composite_not",
                        "composite_and",
                        "composite_or"
                    ]
                }
            },
            "required": [
                "constraint_type"
            ],
            "allOf": [
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "none"
                            }
                        }
                    },
                    "then": {}
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "all_finite_time_actions_done"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "buff": {
                                "$ref": "#/$defs/action_constraint_buff_type"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "buff_has_mutation"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "buff": {
                                "description": "default=current_buff",
                                "$ref": "#/$defs/action_constraint_buff_type"
                            },
                            "mutation": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "mutation"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "buff_time_elapsed"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "buff": {
                                "description": "default=current_buff",
                                "$ref": "#/$defs/action_constraint_buff_type"
                            },
                            "duration_value": {
                                "$ref": "#/$defs/action_value_id"
                            }
                        },
                        "required": [
                            "duration_value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "buff_made_dead_has_context"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "buff_made_dead_context": {
                                "type": "string",
                                "enum": [
                                    "duration_expired",
                                    "all_finite_time_actions_done",
                                    "owner_unit_made_dead",
                                    "necessary_parent_buff_made_dead",
                                    "necessary_child_buff_made_dead",
                                    "necessary_source_ability_released",
                                    "necessary_source_ability_slot_made_unbuilt",
                                    "watched_buff_ability_stopped",
                                    "distance_to_parent_buff_exceeded",
                                    "made_dead_by_action",
                                    "stack_limit_exceeded",
                                    "no_longer_affected_by_buff_provider_research",
                                    "passive_action_not_operational",
                                    "current_spawner_ownership_changed"
                                ]
                            }
                        },
                        "required": [
                            "buff_made_dead_context"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "damage_can_be_propagated"
                            }
                        }
                    },
                    "then": {}
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "damage_has_damage_source"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "damage_source": {
                                "type": "string",
                                "enum": [
                                    "ability",
                                    "debug",
                                    "weapon"
                                ]
                            }
                        },
                        "required": [
                            "damage_source"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "damage_has_weapon_tag"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "weapon_tag": {
                                "$ref": "#/$defs/weapon_tag"
                            }
                        },
                        "required": [
                            "weapon_tag"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "distance_between_units_comparison"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "compare_value": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "comparison_type": {
                                "$ref": "#/$defs/math_comparison_operator"
                            },
                            "unit_a": {
                                "$ref": "#/$defs/action_unit"
                            },
                            "unit_b": {
                                "$ref": "#/$defs/action_unit"
                            }
                        },
                        "required": [
                            "compare_value",
                            "comparison_type",
                            "unit_a",
                            "unit_b"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "has_resurrectable_units_in_gravity_well"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "dead_units_player": {
                                "$ref": "#/$defs/action_player"
                            },
                            "gravity_well_reference_unit": {
                                "$ref": "#/$defs/action_unit"
                            },
                            "min_supply_value": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "min_target_count_value": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "unit_types_to_resurrect": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/$defs/target_filter_unit_type"
                                }
                            }
                        },
                        "required": [
                            "dead_units_player",
                            "gravity_well_reference_unit",
                            "unit_types_to_resurrect"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "has_enemy_units_in_gravity_well"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "gravity_well_reference_unit": {
                                "$ref": "#/$defs/action_unit"
                            },
                            "target_filter_id": {
                                "$ref": "#/$defs/target_filter_id"
                            }
                        },
                        "required": [
                            "gravity_well_reference_unit",
                            "target_filter_id"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "has_valid_targets_in_radius"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "radius_origin_unit": {
                                "$ref": "#/$defs/action_unit"
                            },
                            "radius_value": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "target_count_value": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "target_filter_id": {
                                "$ref": "#/$defs/target_filter_id"
                            }
                        },
                        "required": [
                            "radius_origin_unit",
                            "radius_value",
                            "target_count_value",
                            "target_filter_id"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "is_empowered"
                            }
                        }
                    },
                    "then": {}
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "player_has_available_supply"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "include_future_supply": {
                                "description": "default=false",
                                "type": "boolean"
                            },
                            "minimum_available_supply": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "player": {
                                "$ref": "#/$defs/action_player"
                            }
                        },
                        "required": [
                            "player"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "players_have_alliance_relationship"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "player_a": {
                                "$ref": "#/$defs/action_player"
                            },
                            "player_b": {
                                "$ref": "#/$defs/action_player"
                            },
                            "relationship_type": {
                                "type": "string",
                                "enum": [
                                    "self",
                                    "ally",
                                    "enemy",
                                    "none"
                                ]
                            }
                        },
                        "required": [
                            "player_a",
                            "player_b",
                            "relationship_type"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "random_chance"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "chance_value": {
                                "description": "0=constraint will never pass , 1=constraint will always pass",
                                "$ref": "#/$defs/action_value_id"
                            }
                        },
                        "required": [
                            "chance_value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "research_prerequisites_are_met"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "player": {
                                "$ref": "#/$defs/action_player"
                            },
                            "prerequisites": {
                                "type": "object",
                                "properties": {
                                    "sets": {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "research_subject_definition_ptr": {
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "research_subject_definition_ptr"
                                            ],
                                            "unevaluatedProperties": false
                                        }
                                    }
                                },
                                "unevaluatedProperties": false
                            }
                        },
                        "required": [
                            "player",
                            "prerequisites"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "unit_comparison"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "unit_a": {
                                "$ref": "#/$defs/action_unit"
                            },
                            "unit_b": {
                                "$ref": "#/$defs/action_unit"
                            }
                        },
                        "required": [
                            "unit_a",
                            "unit_b"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "unit_passes_target_filter"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "target_filter_id": {
                                "$ref": "#/$defs/target_filter_id"
                            },
                            "unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        },
                        "required": [
                            "target_filter_id",
                            "unit"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "unit_passes_unit_constraint"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "unit": {
                                "$ref": "#/$defs/action_unit"
                            },
                            "unit_constraint": {
                                "$ref": "#/$defs/unit_constraint"
                            }
                        },
                        "required": [
                            "unit",
                            "unit_constraint"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "value_comparison"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "comparison_type": {
                                "$ref": "#/$defs/math_comparison_operator"
                            },
                            "value_a": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "value_b": {
                                "$ref": "#/$defs/action_value_id"
                            }
                        },
                        "required": [
                            "comparison_type",
                            "value_a",
                            "value_b"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "weapon_has_weapon_tag"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "any_weapon_tags": {
                                "$ref": "#/$defs/weapon_tag_set"
                            },
                            "weapon": {
                                "$ref": "#/$defs/action_weapon_definition"
                            }
                        },
                        "required": [
                            "weapon"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "composite_not"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "constraint": {
                                "$ref": "#/$defs/action_constraint"
                            }
                        },
                        "required": [
                            "constraint"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "composite_and"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "constraints": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/$defs/action_constraint"
                                },
                                "minItems": 2,
                                "maxItems": 5
                            }
                        },
                        "required": [
                            "constraints"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "composite_or"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "constraints": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/$defs/action_constraint"
                                },
                                "minItems": 2,
                                "maxItems": 5
                            }
                        },
                        "required": [
                            "constraints"
                        ]
                    }
                }
            ],
            "unevaluatedProperties": false
        },
        "action_unit": {
            "type": "object",
            "properties": {
                "memory_unit_variable_id": {
                    "$ref": "#/$defs/action_memory_unit_variable_id"
                },
                "redirection": {
                    "type": "string",
                    "enum": [
                        "none",
                        "current_gravity_well",
                        "current_gravity_well_primary_fixture",
                        "current_phase_lane"
                    ]
                },
                "unit_type": {
                    "type": "string",
                    "enum": [
                        "none",
                        "first_spawner",
                        "previous_spawner",
                        "current_spawner",
                        "target",
                        "buff_memory",
                        "operand_source",
                        "operand_destination",
                        "trigger_event_source",
                        "trigger_event_destination",
                        "home_planet"
                    ]
                }
            },
            "required": [
                "unit_type"
            ],
            "unevaluatedProperties": false
        },
        "action_ability": {
            "type": "object",
            "properties": {
                "ability_type": {
                    "type": "string",
                    "enum": [
                        "source_ability",
                        "all_abilities",
                        "ability_at_index",
                        "trigger_event_context_ability"
                    ]
                }
            },
            "required": [
                "ability_type"
            ],
            "allOf": [
                {
                    "if": {
                        "properties": {
                            "ability_type": {
                                "const": "all_abilities"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "unit_with_abilities": {
                                "$ref": "#/$defs/action_unit"
                            }
                        },
                        "required": [
                            "unit_with_abilities"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "ability_type": {
                                "const": "ability_at_index"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "ability_index": {
                                "type": "integer"
                            },
                            "unit_with_abilities": {
                                "$ref": "#/$defs/action_unit"
                            }
                        },
                        "required": [
                            "ability_index",
                            "unit_with_abilities"
                        ]
                    }
                }
            ],
            "unevaluatedProperties": false
        },
        "action_buff": {
            "type": "string",
            "enum": [
                "current_buff",
                "parent_buff",
                "all_child_buffs",
                "all_buffs_on_current_spawner"
            ]
        },
        "action_constraint_buff_type": {
            "type": "string",
            "enum": [
                "current_buff",
                "parent_buff",
                "operand_buff"
            ]
        },
        "math_comparison_operator": {
            "type": "string",
            "enum": [
                "less_than",
                "less_than_equal_to",
                "equal_to",
                "equal_to_less_one",
                "greater_than_equal_to",
                "greater_than"
            ]
        },
        "action_effect_definition": {
            "type": "object",
            "properties": {
                "allow_binding_of_unit_skin_without_unit": {
                    "description": "default=false",
                    "type": "boolean"
                },
                "binding": {
                    "$ref": "#/$defs/action_effect_alias_binding"
                },
                "effect": {
                    "$ref": "#/$defs/effect_alias_name"
                },
                "effect_by_size": {
                    "type": "object",
                    "properties": {
                        "large_unit": {
                            "$ref": "#/$defs/effect_alias_name"
                        },
                        "medium_unit": {
                            "$ref": "#/$defs/effect_alias_name"
                        },
                        "small_unit": {
                            "$ref": "#/$defs/effect_alias_name"
                        }
                    },
                    "required": [
                        "large_unit",
                        "medium_unit",
                        "small_unit"
                    ],
                    "unevaluatedProperties": false
                },
                "mesh_point": {
                    "$ref": "#/$defs/mesh_point_name"
                },
                "mesh_point_index": {
                    "type": "integer"
                },
                "mesh_point_usage": {
                    "description": "default=first",
                    "$ref": "#/$defs/action_effect_mesh_point_usage"
                },
                "only_visible_if_mesh_is_visible": {
                    "description": "default=true",
                    "type": "boolean"
                }
            },
            "required": [
                "binding",
                "mesh_point"
            ],
            "unevaluatedProperties": false
        },
        "action_effect_alias_binding": {
            "type": "string",
            "enum": [
                "unit_skin",
                "action_data_source"
            ]
        },
        "action_effect_mesh_point_usage": {
            "type": "string",
            "enum": [
                "first",
                "index",
                "all"
            ]
        },
        "action_position": {
            "type": "object",
            "properties": {
                "ability": {
                    "$ref": "#/$defs/action_ability"
                },
                "ability_position_picking_type": {
                    "$ref": "#/$defs/ability_position_picking_type"
                },
                "direction": {
                    "$ref": "#/$defs/action_direction"
                },
                "distance_value": {
                    "$ref": "#/$defs/action_value_id"
                },
                "offset_position": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    },
                    "minItems": 3,
                    "maxItems": 3
                },
                "offset_rotation": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    },
                    "minItems": 9,
                    "maxItems": 9
                },
                "position_type": {
                    "type": "string",
                    "enum": [
                        "target_position",
                        "unit_position",
                        "operand_position",
                        "unit_space_offset_from_unit",
                        "distance_in_direction_from_position",
                        "ability_position"
                    ]
                },
                "source_position": {
                    "$ref": "#/$defs/action_position"
                },
                "unit": {
                    "$ref": "#/$defs/action_unit"
                }
            },
            "required": [
                "position_type"
            ],
            "if": {
                "properties": {
                    "ability_position_picking_type": {
                        "const": "at_index"
                    }
                }
            },
            "then": {
                "properties": {
                    "ability_position_index": {
                        "type": "integer",
                        "minimum": 0
                    }
                }
            },
            "unevaluatedProperties": false
        },
        "action_position_operator": {
            "type": "object",
            "properties": {
                "operator_type": {
                    "type": "string",
                    "enum": [
                        "create_buff_agent",
                        "create_unit",
                        "create_torpedo",
                        "play_point_effect"
                    ]
                }
            },
            "required": [
                "operator_type"
            ],
            "allOf": [
                {
                    "if": {
                        "properties": {
                            "operator_type": {
                                "const": "create_buff_agent"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "buff_agent_effect_size_reference_unit": {
                                "description": "determines the action_effect size of the buff agent that is created, default is current_spawner",
                                "$ref": "#/$defs/action_unit"
                            },
                            "buff_on_agent": {
                                "type": "string"
                            },
                            "copy_parent_buff_memory_values": {
                                "description": "default=false",
                                "type": "boolean"
                            },
                            "is_culture_provider": {
                                "description": "specify whether the buff_agent supports culture_provider functionality or not. default=false",
                                "type": "boolean"
                            }
                        },
                        "required": [
                            "buff_on_agent"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "operator_type": {
                                "const": "create_unit"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "buff_on_created_unit": {
                                "type": "string"
                            },
                            "copy_parent_buff_memory_values": {
                                "description": "default=false",
                                "type": "boolean"
                            },
                            "hyperspace_destination_position": {
                                "$ref": "#/$defs/action_position"
                            },
                            "is_change_gravity_well_to_hyperspace_destination_enabled": {
                                "description": "Set to false if this unit is not intended to live on in the destination gravity well. For example orbital cannon shell.",
                                "type": "boolean"
                            },
                            "is_self_building": {
                                "description": "default=false",
                                "type": "boolean"
                            },
                            "special_operation_unit_kind": {
                                "$ref": "#/$defs/special_operation_unit_kind"
                            },
                            "unit_forward": {
                                "$ref": "#/$defs/action_direction"
                            },
                            "unit_to_create": {
                                "$ref": "#/$defs/unit_definition_ptr"
                            }
                        },
                        "required": [
                            "unit_forward",
                            "unit_to_create"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "operator_type": {
                                "const": "create_torpedo"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "bypass_shields_chance_value": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "damage_affect_type": {
                                "$ref": "#/$defs/damage_affect_type"
                            },
                            "damage_value": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "duration_value": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "penetration_value": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "torpedo_can_retarget": {
                                "description": "default=empty",
                                "type": "boolean"
                            },
                            "torpedo_enable_steering_distance_as_radius_scalar_value": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "torpedo_forward": {
                                "$ref": "#/$defs/action_direction"
                            },
                            "torpedo_source_unit": {
                                "$ref": "#/$defs/action_unit"
                            },
                            "torpedo_target_position": {
                                "$ref": "#/$defs/action_position"
                            },
                            "torpedo_target_unit": {
                                "$ref": "#/$defs/action_unit"
                            },
                            "torpedo_to_create": {
                                "$ref": "#/$defs/unit_definition_ptr"
                            }
                        },
                        "required": [
                            "damage_affect_type",
                            "damage_value",
                            "duration_value",
                            "penetration_value",
                            "torpedo_forward",
                            "torpedo_source_unit",
                            "torpedo_to_create"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "operator_type": {
                                "const": "play_point_effect"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "effect_definition": {
                                "$ref": "#/$defs/action_effect_definition"
                            },
                            "effect_destination_unit": {
                                "description": "the unit the effect is attached to",
                                "$ref": "#/$defs/action_unit"
                            },
                            "effect_forward": {
                                "$ref": "#/$defs/action_direction"
                            },
                            "effect_up": {
                                "$ref": "#/$defs/action_direction"
                            }
                        },
                        "required": [
                            "effect_definition",
                            "effect_destination_unit",
                            "effect_forward"
                        ]
                    }
                }
            ],
            "unevaluatedProperties": false
        },
        "action_direction": {
            "type": "object",
            "properties": {
                "direction_type": {
                    "type": "string",
                    "enum": [
                        "random_direction",
                        "from_unit_to_target_position",
                        "from_position_to_position",
                        "operand_position_forward",
                        "unit_forward",
                        "unit_cross",
                        "unit_up",
                        "galaxy_up"
                    ]
                }
            },
            "required": [
                "direction_type"
            ],
            "allOf": [
                {
                    "if": {
                        "properties": {
                            "direction_type": {
                                "const": "from_unit_to_target_position"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        },
                        "required": [
                            "unit"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "direction_type": {
                                "const": "from_position_to_position"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "destination_position": {
                                "$ref": "#/$defs/action_position"
                            },
                            "source_position": {
                                "$ref": "#/$defs/action_position"
                            }
                        },
                        "required": [
                            "destination_position",
                            "source_position"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "direction_type": {
                                "const": "unit_forward"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        },
                        "required": [
                            "unit"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "direction_type": {
                                "const": "unit_cross"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        },
                        "required": [
                            "unit"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "direction_type": {
                                "const": "unit_up"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        },
                        "required": [
                            "unit"
                        ]
                    }
                }
            ],
            "unevaluatedProperties": false
        },
        "npc_reward_weight_vector": {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "npc_reward": {
                        "$ref": "#/$defs/npc_reward_definition_ptr"
                    },
                    "weight": {
                        "type": "number"
                    }
                },
                "required": [
                    "npc_reward",
                    "weight"
                ],
                "unevaluatedProperties": false
            }
        },
        "action_unit_operator": {
            "type": "object",
            "properties": {
                "constraint": {
                    "$ref": "#/$defs/action_constraint"
                },
                "operator_type": {
                    "type": "string",
                    "enum": [
                        "apply_buff",
                        "apply_damage",
                        "bomb_planet",
                        "change_buff_memory_float_value",
                        "change_buff_memory_unit_value",
                        "change_owner_player",
                        "colonize_planet",
                        "create_clones",
                        "create_phase_lane",
                        "give_assets",
                        "give_destroy_planet_rewards",
                        "give_experience",
                        "give_exotics",
                        "make_dead",
                        "play_point_effect",
                        "play_weapon_effects",
                        "remove_antimatter",
                        "restore_antimatter",
                        "repair_damage",
                        "restore_planet_health",
                        "stop_move",
                        "teleport",
                        "teleport_to_gravity_well",
                        "explore",
                        "spawn_units",
                        "destroy_planet",
                        "build_instant_strikecraft",
                        "spawn_detached_strikecraft",
                        "increase_planet_track_level",
                        "remove_unit_item",
                        "add_unit_item"
                    ]
                }
            },
            "required": [
                "operator_type"
            ],
            "allOf": [
                {
                    "if": {
                        "properties": {
                            "operator_type": {
                                "const": "apply_buff"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "buff": {
                                "$ref": "#/$defs/buff_definition_ptr"
                            },
                            "copy_parent_buff_memory_values": {
                                "description": "default=false",
                                "type": "boolean"
                            },
                            "destination_target_filter_id": {
                                "$ref": "#/$defs/target_filter_id"
                            },
                            "destination_unit": {
                                "description": "default=operand_destination",
                                "$ref": "#/$defs/action_unit"
                            },
                            "initial_float_values": {
                                "$ref": "#/$defs/action_memory_float_value_vector"
                            },
                            "override_ownership_player": {
                                "$ref": "#/$defs/action_player"
                            },
                            "override_ownership_unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        },
                        "required": [
                            "buff"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "operator_type": {
                                "const": "apply_damage"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "bypass_shields_chance_value": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "can_damage_be_propagated": {
                                "description": "default=true",
                                "type": "boolean"
                            },
                            "damage_value": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "ignore_infinite_recursion_guard": {
                                "description": "default=false",
                                "type": "boolean"
                            },
                            "penetration_value": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "source_unit": {
                                "description": "default=first_spawner",
                                "$ref": "#/$defs/action_unit"
                            },
                            "use_source_weapon_properties": {
                                "description": "default=false",
                                "type": "boolean"
                            }
                        },
                        "required": [
                            "damage_value",
                            "penetration_value"
                        ],
                        "if": {
                            "properties": {
                                "use_source_weapon_properties": {
                                    "const": false
                                }
                            }
                        },
                        "then": {
                            "properties": {
                                "damage_affect_type": {
                                    "$ref": "#/$defs/damage_affect_type"
                                },
                                "damage_source": {
                                    "$ref": "#/$defs/damage_source_type"
                                },
                                "weapon_tags": {
                                    "$ref": "#/$defs/weapon_tag_set"
                                }
                            },
                            "required": [
                                "damage_affect_type",
                                "damage_source"
                            ]
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "operator_type": {
                                "const": "bomb_planet"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "bombing_damage_value": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "damage_source": {
                                "$ref": "#/$defs/damage_source_type"
                            },
                            "show_enemy_planet_made_dead_from_bombing_notification": {
                                "description": "default=true",
                                "type": "boolean"
                            },
                            "weapon_tags": {
                                "$ref": "#/$defs/weapon_tag_set"
                            }
                        },
                        "required": [
                            "bombing_damage_value",
                            "damage_source"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "operator_type": {
                                "const": "change_buff_memory_float_value"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "buff": {
                                "description": "default=current_buff",
                                "$ref": "#/$defs/action_buff"
                            },
                            "float_variable": {
                                "$ref": "#/$defs/action_memory_float_variable_id"
                            },
                            "math_operators": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/$defs/action_math_operator"
                                }
                            }
                        },
                        "required": [
                            "float_variable",
                            "math_operators"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "operator_type": {
                                "const": "change_buff_memory_unit_value"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "buff": {
                                "description": "default=current_buff",
                                "$ref": "#/$defs/action_buff"
                            },
                            "new_unit_value": {
                                "$ref": "#/$defs/action_unit"
                            },
                            "unit_variable": {
                                "$ref": "#/$defs/action_memory_unit_variable_id"
                            }
                        },
                        "required": [
                            "new_unit_value",
                            "unit_variable"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "operator_type": {
                                "const": "change_owner_player"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "auto_add_to_source_unit_fleet": {
                                "description": "default=first_spawner",
                                "$ref": "#/$defs/action_unit"
                            },
                            "keep_planet_track_levels": {
                                "description": "default=false",
                                "type": "boolean"
                            },
                            "new_owner_player": {
                                "$ref": "#/$defs/action_player"
                            }
                        },
                        "required": [
                            "new_owner_player"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "operator_type": {
                                "const": "colonize_planet"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "buff_on_planet": {
                                "$ref": "#/$defs/buff_definition_ptr"
                            },
                            "copy_parent_buff_memory_values": {
                                "description": "default=false",
                                "type": "boolean"
                            },
                            "initial_float_values": {
                                "$ref": "#/$defs/action_memory_float_value_vector"
                            },
                            "override_ownership_player": {
                                "$ref": "#/$defs/action_player"
                            },
                            "override_ownership_unit": {
                                "$ref": "#/$defs/action_unit"
                            },
                            "show_planet_colonized_notification": {
                                "description": "default=true",
                                "type": "boolean"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "operator_type": {
                                "const": "create_clones"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "buff_on_clone": {
                                "$ref": "#/$defs/buff_definition_ptr"
                            },
                            "clone_count": {
                                "description": "default=1",
                                "$ref": "#/$defs/action_value_id"
                            },
                            "clone_forward": {
                                "$ref": "#/$defs/action_direction"
                            },
                            "clone_spawn_position": {
                                "$ref": "#/$defs/action_position"
                            },
                            "copy_destination_unit_state": {
                                "description": "default=false",
                                "type": "boolean"
                            },
                            "copy_parent_buff_memory_values": {
                                "description": "default=false",
                                "type": "boolean"
                            },
                            "initial_float_values": {
                                "$ref": "#/$defs/action_memory_float_value_vector"
                            },
                            "override_ownership_unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        },
                        "required": [
                            "clone_forward",
                            "clone_spawn_position"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "operator_type": {
                                "const": "create_phase_lane"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "buff": {
                                "$ref": "#/$defs/buff_definition_ptr"
                            },
                            "destination_gravity_well": {
                                "$ref": "#/$defs/action_unit"
                            },
                            "owner_player": {
                                "$ref": "#/$defs/action_player"
                            },
                            "source_gravity_well": {
                                "$ref": "#/$defs/action_unit"
                            }
                        },
                        "required": [
                            "destination_gravity_well",
                            "owner_player",
                            "source_gravity_well"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "operator_type": {
                                "const": "give_assets"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "asset_type": {
                                "$ref": "#/$defs/asset_type"
                            },
                            "asset_value": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "context": {
                                "description": "default=action",
                                "$ref": "#/$defs/player_asset_delta_source"
                            },
                            "destination_unit": {
                                "description": "default=operand_destination",
                                "$ref": "#/$defs/action_unit"
                            },
                            "log_different_fixtures_as_unique_events": {
                                "description": "default=false",
                                "type": "boolean"
                            }
                        },
                        "required": [
                            "asset_type",
                            "asset_value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "operator_type": {
                                "const": "give_destroy_planet_rewards"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "give_assets_context": {
                                "description": "default=action",
                                "$ref": "#/$defs/player_asset_delta_source"
                            },
                            "give_exotic_context": {
                                "description": "default=destroy_planet_rewards",
                                "$ref": "#/$defs/give_exotic_context"
                            },
                            "rewards_destination_player": {
                                "$ref": "#/$defs/action_player"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "operator_type": {
                                "const": "give_experience"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "context": {
                                "description": "default=buff",
                                "type": "string",
                                "enum": [
                                    "debug",
                                    "create_unit",
                                    "buff",
                                    "unit_death",
                                    "planet_bombing",
                                    "loot_collection"
                                ]
                            },
                            "experience_value": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "level_cap_value": {
                                "$ref": "#/$defs/action_value_id"
                            }
                        },
                        "required": [
                            "experience_value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "operator_type": {
                                "const": "give_exotics"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "context": {
                                "description": "default=action",
                                "$ref": "#/$defs/give_exotic_context"
                            },
                            "destination_unit": {
                                "description": "default=operand_destination",
                                "$ref": "#/$defs/action_unit"
                            },
                            "exotics": {
                                "$ref": "#/$defs/action_exotics"
                            }
                        },
                        "required": [
                            "exotics"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "operator_type": {
                                "const": "make_dead"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "skip_awarding_experience": {
                                "description": "default=true",
                                "type": "boolean"
                            },
                            "skip_death_sequence": {
                                "description": "default=false",
                                "type": "boolean"
                            },
                            "skip_player_statistics": {
                                "description": "default=true",
                                "type": "boolean"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "operator_type": {
                                "const": "play_point_effect"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "effect_definition": {
                                "$ref": "#/$defs/action_effect_definition"
                            }
                        },
                        "required": [
                            "effect_definition"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "operator_type": {
                                "const": "play_weapon_effects"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "beam_duration": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "charge_duration": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "effect_alias_binding": {
                                "$ref": "#/$defs/action_effect_alias_binding"
                            },
                            "effects": {
                                "$ref": "#/$defs/weapon_effects_definition"
                            },
                            "mesh_point": {
                                "$ref": "#/$defs/mesh_point_name"
                            }
                        },
                        "required": [
                            "effect_alias_binding",
                            "effects",
                            "mesh_point"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "operator_type": {
                                "const": "remove_antimatter"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "antimatter_remove_value": {
                                "$ref": "#/$defs/action_value_id"
                            }
                        },
                        "required": [
                            "antimatter_remove_value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "operator_type": {
                                "const": "restore_antimatter"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "antimatter_restore_value": {
                                "$ref": "#/$defs/action_value_id"
                            }
                        },
                        "required": [
                            "antimatter_restore_value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "operator_type": {
                                "const": "repair_damage"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "affect_type": {
                                "$ref": "#/$defs/damage_affect_type"
                            },
                            "can_damage_be_propagated": {
                                "description": "default=true",
                                "type": "boolean"
                            },
                            "destination_unit": {
                                "description": "default=operand_destination",
                                "$ref": "#/$defs/action_unit"
                            },
                            "ignore_infinite_recursion_guard": {
                                "description": "default=false",
                                "type": "boolean"
                            },
                            "repair_value": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "source_unit": {
                                "description": "default=first_spawner",
                                "$ref": "#/$defs/action_unit"
                            }
                        },
                        "required": [
                            "affect_type",
                            "repair_value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "operator_type": {
                                "const": "restore_planet_health"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "damage_source": {
                                "$ref": "#/$defs/damage_source_type"
                            },
                            "restore_amount_value": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "weapon_tags": {
                                "$ref": "#/$defs/weapon_tag_set"
                            }
                        },
                        "required": [
                            "restore_amount_value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "operator_type": {
                                "const": "stop_move"
                            }
                        }
                    },
                    "then": {}
                },
                {
                    "if": {
                        "properties": {
                            "operator_type": {
                                "const": "teleport"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "destination_position": {
                                "$ref": "#/$defs/action_position"
                            }
                        },
                        "required": [
                            "destination_position"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "operator_type": {
                                "const": "teleport_to_gravity_well"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "destination_reference_unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        },
                        "required": [
                            "destination_reference_unit"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "operator_type": {
                                "const": "explore"
                            }
                        }
                    },
                    "then": {}
                },
                {
                    "if": {
                        "properties": {
                            "operator_type": {
                                "const": "spawn_units"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "arrival_delay_value": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "available_supply_value": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "check_research_prerequisites": {
                                "type": "boolean"
                            },
                            "constrain_available_supply_to_owner_player": {
                                "type": "boolean"
                            },
                            "in_hyperspace": {
                                "type": "boolean"
                            },
                            "owner_player": {
                                "$ref": "#/$defs/action_player"
                            },
                            "special_operation_unit_kind": {
                                "$ref": "#/$defs/special_operation_unit_kind"
                            },
                            "units": {
                                "type": "object",
                                "properties": {
                                    "formation_type": {
                                        "$ref": "#/$defs/formation_type"
                                    },
                                    "random_units": {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "options": {
                                                    "type": "object",
                                                    "properties": {
                                                        "forced_leveled_up_ability": {
                                                            "$ref": "#/$defs/ability_definition_ptr"
                                                        },
                                                        "forced_strikecraft_index": {
                                                            "type": "integer"
                                                        },
                                                        "is_temporary_ruler_ship": {
                                                            "type": "boolean"
                                                        },
                                                        "items": {
                                                            "type": "array",
                                                            "items": {
                                                                "$ref": "#/$defs/unit_item_definition_ptr"
                                                            }
                                                        },
                                                        "level": {
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "unevaluatedProperties": false
                                                },
                                                "unit": {
                                                    "$ref": "#/$defs/unit_definition_ptr"
                                                },
                                                "weight": {
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "unit",
                                                "weight"
                                            ],
                                            "unevaluatedProperties": false
                                        }
                                    },
                                    "required_units": {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "count": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "integer"
                                                    },
                                                    "minItems": 2,
                                                    "maxItems": 2
                                                },
                                                "options": {
                                                    "type": "object",
                                                    "properties": {
                                                        "forced_leveled_up_ability": {
                                                            "$ref": "#/$defs/ability_definition_ptr"
                                                        },
                                                        "forced_strikecraft_index": {
                                                            "type": "integer"
                                                        },
                                                        "is_temporary_ruler_ship": {
                                                            "type": "boolean"
                                                        },
                                                        "items": {
                                                            "type": "array",
                                                            "items": {
                                                                "$ref": "#/$defs/unit_item_definition_ptr"
                                                            }
                                                        },
                                                        "level": {
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "unevaluatedProperties": false
                                                },
                                                "unit": {
                                                    "$ref": "#/$defs/unit_definition_ptr"
                                                }
                                            },
                                            "required": [
                                                "unit"
                                            ],
                                            "unevaluatedProperties": false
                                        }
                                    }
                                },
                                "unevaluatedProperties": false
                            }
                        },
                        "required": [
                            "arrival_delay_value",
                            "check_research_prerequisites",
                            "constrain_available_supply_to_owner_player",
                            "in_hyperspace",
                            "owner_player",
                            "units"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "operator_type": {
                                "const": "destroy_planet"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "suppress_ui_notifications": {
                                "description": "default=true",
                                "type": "boolean"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "operator_type": {
                                "const": "build_instant_strikecraft"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "build_strikecraft_count": {
                                "$ref": "#/$defs/action_value_id"
                            }
                        },
                        "required": [
                            "build_strikecraft_count"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "operator_type": {
                                "const": "spawn_detached_strikecraft"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "buff_on_strikecraft": {
                                "$ref": "#/$defs/buff_definition_ptr"
                            },
                            "strikecraft_count_value": {
                                "$ref": "#/$defs/action_value_id"
                            }
                        },
                        "required": [
                            "buff_on_strikecraft",
                            "strikecraft_count_value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "operator_type": {
                                "const": "increase_planet_track_level"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "ignore_research": {
                                "description": "if true the levels added even if player does not have research to support these track levels",
                                "type": "boolean"
                            },
                            "level_count_value": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "planet_track_type": {
                                "$ref": "#/$defs/planet_track_type"
                            },
                            "will_offset_development_track_upgrade_price": {
                                "type": "boolean"
                            }
                        },
                        "required": [
                            "ignore_research",
                            "planet_track_type",
                            "will_offset_development_track_upgrade_price"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "operator_type": {
                                "const": "remove_unit_item"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "unit_item": {
                                "$ref": "#/$defs/unit_item_definition_ptr"
                            }
                        },
                        "required": [
                            "unit_item"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "operator_type": {
                                "const": "add_unit_item"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "unit_item": {
                                "$ref": "#/$defs/unit_item_definition_ptr"
                            }
                        },
                        "required": [
                            "unit_item"
                        ]
                    }
                }
            ],
            "unevaluatedProperties": false
        },
        "action_memory_float_value_vector": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/action_memory_float_value"
            },
            "maxItems": 4
        },
        "action_travel_time": {
            "type": "object",
            "properties": {
                "travel_time_source": {
                    "type": "string",
                    "enum": [
                        "explicit_time",
                        "speed_and_distance"
                    ]
                }
            },
            "required": [
                "travel_time_source"
            ],
            "allOf": [
                {
                    "if": {
                        "properties": {
                            "travel_time_source": {
                                "const": "explicit_time"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "explicit_time_value": {
                                "$ref": "#/$defs/action_value_id"
                            }
                        },
                        "required": [
                            "explicit_time_value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "travel_time_source": {
                                "const": "speed_and_distance"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "travel_speed_value": {
                                "$ref": "#/$defs/action_value_id"
                            }
                        },
                        "required": [
                            "travel_speed_value"
                        ]
                    }
                }
            ],
            "unevaluatedProperties": false
        },
        "action_exotics": {
            "type": "object",
            "properties": {
                "exotics_source_type": {
                    "type": "string",
                    "enum": [
                        "explicit_amount",
                        "unit_build_cost"
                    ]
                }
            },
            "required": [
                "exotics_source_type"
            ],
            "allOf": [
                {
                    "if": {
                        "properties": {
                            "exotics_source_type": {
                                "const": "explicit_amount"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "exotic_amounts": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "count_value": {
                                            "$ref": "#/$defs/action_value_id"
                                        },
                                        "exotic_type": {
                                            "$ref": "#/$defs/exotic_type"
                                        }
                                    },
                                    "required": [
                                        "count_value",
                                        "exotic_type"
                                    ],
                                    "unevaluatedProperties": false
                                }
                            }
                        },
                        "required": [
                            "exotic_amounts"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "exotics_source_type": {
                                "const": "unit_build_cost"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "source_unit": {
                                "$ref": "#/$defs/action_unit"
                            }
                        },
                        "required": [
                            "source_unit"
                        ]
                    }
                }
            ],
            "unevaluatedProperties": false
        },
        "action_weapon_definition": {
            "type": "string",
            "enum": [
                "source_weapon",
                "trigger_event_weapon"
            ]
        },
        "action_tooltip_line": {
            "type": "object",
            "properties": {
                "asset_value_ids": {
                    "type": "object",
                    "properties": {
                        "credits": {
                            "$ref": "#/$defs/action_value_id"
                        },
                        "crystal": {
                            "$ref": "#/$defs/action_value_id"
                        },
                        "metal": {
                            "$ref": "#/$defs/action_value_id"
                        }
                    },
                    "unevaluatedProperties": false
                },
                "empire_modifier_id": {
                    "$ref": "#/$defs/buff_empire_modifier_id"
                },
                "exotic_counts": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "count": {
                                "$ref": "#/$defs/action_value_id"
                            },
                            "type": {
                                "$ref": "#/$defs/exotic_type"
                            }
                        },
                        "unevaluatedProperties": false
                    }
                },
                "is_culture_rate": {
                    "type": "boolean"
                },
                "is_resolved_value": {
                    "type": "boolean"
                },
                "label_text": {
                    "$ref": "#/$defs/localized_text_ptr"
                },
                "planet_modifier_id": {
                    "$ref": "#/$defs/buff_planet_modifier_id"
                },
                "ratio_float_format": {
                    "description": "default=no_decimal_place_with_sign",
                    "type": "string",
                    "enum": [
                        "no_decimal_place",
                        "one_decimal_place",
                        "one_decimal_place_if_not_whole",
                        "two_decimal_place",
                        "no_decimal_place_with_sign",
                        "one_decimal_place_with_sign",
                        "two_decimal_place_with_sign",
                        "percentage",
                        "percentage_one_decimal_place",
                        "percentage_with_sign",
                        "percentage_one_decimal_place_with_sign"
                    ]
                },
                "rendering_type": {
                    "type": "string",
                    "enum": [
                        "single_value",
                        "asset_values",
                        "single_line",
                        "unit_item_value",
                        "unit_icon_and_name",
                        "exotic_counts",
                        "buff_unit_modifier",
                        "buff_planet_modifier",
                        "buff_weapon_modifier",
                        "buff_empire_modifier",
                        "buff_unit_factory_modifier",
                        "buff_trade_capacity",
                        "exotic_income"
                    ]
                },
                "trade_export_credits_points_id": {
                    "$ref": "#/$defs/buff_unit_modifier_id"
                },
                "trade_export_crystal_points_id": {
                    "$ref": "#/$defs/buff_unit_modifier_id"
                },
                "trade_export_metal_points_id": {
                    "$ref": "#/$defs/buff_unit_modifier_id"
                },
                "trade_import_points_id": {
                    "$ref": "#/$defs/buff_unit_modifier_id"
                },
                "unit": {
                    "$ref": "#/$defs/unit_definition_ptr"
                },
                "unit_factory_modifier_id": {
                    "$ref": "#/$defs/buff_unit_factory_modifier_id"
                },
                "unit_item": {
                    "$ref": "#/$defs/unit_item_definition_ptr"
                },
                "unit_modifier_id": {
                    "$ref": "#/$defs/buff_unit_modifier_id"
                },
                "value_color": {
                    "description": "default=neutral",
                    "type": "string",
                    "enum": [
                        "neutral",
                        "positive",
                        "negative"
                    ]
                },
                "value_float_format": {
                    "description": "default=no_decimal_place",
                    "type": "string",
                    "enum": [
                        "no_decimal_place",
                        "one_decimal_place",
                        "one_decimal_place_if_not_whole",
                        "two_decimal_place",
                        "no_decimal_place_with_sign",
                        "one_decimal_place_with_sign",
                        "two_decimal_place_with_sign",
                        "percentage",
                        "percentage_one_decimal_place",
                        "percentage_with_sign",
                        "percentage_one_decimal_place_with_sign"
                    ]
                },
                "value_id": {
                    "$ref": "#/$defs/action_value_id"
                },
                "value_modifiers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/$defs/action_math_operator"
                    }
                },
                "value_suffix": {
                    "type": "string",
                    "enum": [
                        "seconds",
                        "minutes",
                        "per_second",
                        "per_minute"
                    ]
                },
                "value_suffix_text": {
                    "$ref": "#/$defs/localized_text_ptr"
                },
                "visibility": {
                    "description": "default=any",
                    "type": "string",
                    "enum": [
                        "any",
                        "use_only",
                        "upgrade_only"
                    ]
                },
                "visible_if_value_zero": {
                    "description": "default=false",
                    "type": "boolean"
                },
                "weapon_modifier_id": {
                    "$ref": "#/$defs/buff_weapon_modifier_id"
                }
            },
            "required": [
                "rendering_type"
            ],
            "unevaluatedProperties": false
        },
        "action_tooltip_line_group": {
            "type": "object",
            "properties": {
                "header_text": {
                    "$ref": "#/$defs/localized_text_ptr"
                },
                "is_visible_constraint": {
                    "description": "todo_json_schema",
                    "$ref": "#/$defs/action_constraint"
                },
                "lines": {
                    "type": "array",
                    "items": {
                        "$ref": "#/$defs/action_tooltip_line"
                    }
                }
            },
            "unevaluatedProperties": false
        },
        "exotic_factory_modifier_type": {
            "type": "string",
            "enum": [
                "build_time"
            ]
        },
        "planet_modifier_type": {
            "type": "string",
            "enum": [
                "max_civilian_structure_slots",
                "max_military_structure_slots",
                "commerce_track_credit_income_rate",
                "mining_track_metal_income_rate",
                "mining_track_crystal_income_rate",
                "orbital_extraction_metal_income_rate",
                "orbital_extraction_crystal_income_rate",
                "civilian_research_points",
                "military_research_points",
                "civilian_research_rate",
                "military_research_rate",
                "culture_rate",
                "culture_resistance_rate",
                "unity_points",
                "max_health_points",
                "health_points_restore_rate",
                "max_shield_points",
                "shield_points_restore_rate",
                "factory_unit_build_price",
                "factory_unit_build_time",
                "factory_exotic_build_time",
                "any_development_track_build_price",
                "any_development_track_build_time",
                "defense_track_build_price",
                "defense_track_build_time",
                "logistics_track_build_price",
                "logistics_track_build_time",
                "commerce_track_build_price",
                "commerce_track_build_time",
                "mining_track_build_price",
                "mining_track_build_time",
                "research_track_build_price",
                "research_track_build_time",
                "surveying_track_build_price",
                "surveying_track_build_time",
                "structure_build_price",
                "structure_build_time",
                "gravity_well_radius",
                "structure_builder_count",
                "max_garrison_supply",
                "bombing_damage_taken",
                "planet_component_price",
                "max_planet_component_slots",
                "max_influence_points"
            ]
        },
        "weapon_tag": {
            "type": "string"
        },
        "weapon_type": {
            "type": "string",
            "enum": [
                "normal",
                "planet_bombing"
            ]
        },
        "weapon_modifier_type": {
            "type": "string",
            "enum": [
                "damage",
                "cooldown_duration",
                "range",
                "tracking_speed",
                "bypass_shields_chance"
            ]
        },
        "weapon_effects_definition": {
            "type": "object",
            "properties": {
                "beam_effect": {
                    "$ref": "#/$defs/effect_alias_name"
                },
                "burst_pattern": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "charge_effect": {
                    "$ref": "#/$defs/effect_alias_name"
                },
                "hit_hull_effect": {
                    "$ref": "#/$defs/effect_alias_name"
                },
                "hit_shield_effect": {
                    "$ref": "#/$defs/effect_alias_name"
                },
                "hit_shield_impact_radius_t": {
                    "description": "default=0.5",
                    "type": "number"
                },
                "max_planet_equator_variance": {
                    "description": "default=10",
                    "type": "number"
                },
                "muzzle_effect": {
                    "$ref": "#/$defs/effect_alias_name"
                },
                "muzzle_picking_behavior": {
                    "description": "default=all",
                    "type": "string",
                    "enum": [
                        "sequential",
                        "random",
                        "all"
                    ]
                },
                "projectile_travel_easing_function": {
                    "description": "default=linear",
                    "type": "string",
                    "enum": [
                        "linear",
                        "in_sine",
                        "out_sine",
                        "in_out_sine",
                        "in_quad",
                        "out_quad",
                        "in_out_quad",
                        "in_cubic",
                        "out_cubic",
                        "in_out_cubic",
                        "in_quart",
                        "out_quart",
                        "in_out_quart",
                        "in_quint",
                        "out_quint",
                        "in_out_quint",
                        "in_expo",
                        "out_expo",
                        "in_out_expo"
                    ]
                },
                "projectile_travel_effect": {
                    "$ref": "#/$defs/effect_alias_name"
                }
            },
            "unevaluatedProperties": false
        },
        "empire_modifier_type": {
            "type": "string",
            "enum": [
                "credit_income_rate",
                "metal_income_rate",
                "crystal_income_rate",
                "percentage_of_other_players_total_credit_income",
                "surveying_bonus_exotic_chance",
                "factory_build_exotic_price",
                "civilian_research_rate",
                "military_research_rate",
                "max_supply",
                "trade_credits_income_rate",
                "trade_metal_income_rate",
                "trade_crystal_income_rate",
                "max_influence_points",
                "influence_points_recharge_rate",
                "unity_points",
                "unity_max_mana_points",
                "unity_mana_restore_rate"
            ]
        },
        "unit_constraint": {
            "type": "object",
            "properties": {
                "constraint_type": {
                    "type": "string",
                    "enum": [
                        "has_definition",
                        "has_ability",
                        "has_adjacent_planet_with_ownership",
                        "has_antimatter",
                        "has_buff",
                        "has_missing_hull",
                        "has_missing_armor",
                        "has_missing_shields",
                        "has_missing_antimatter",
                        "has_missing_strikecraft",
                        "has_mutation",
                        "has_orders",
                        "has_permission",
                        "has_recently_been_damaged",
                        "has_recently_fired_weapon",
                        "has_build_price",
                        "has_health",
                        "has_shields",
                        "has_weapon",
                        "has_experience",
                        "has_planet_type",
                        "has_ship_role",
                        "has_unit_level",
                        "weapon_has_target",
                        "is_always_a_threat",
                        "is_bombing_planet",
                        "is_carrier",
                        "is_asteroid",
                        "is_colonizable_planet",
                        "is_culture_provider",
                        "is_explored_planet",
                        "is_fully_built",
                        "is_home_planet",
                        "is_unit_factory",
                        "is_unit_factory_building_units",
                        "is_structure_with_slot_type",
                        "is_structure_plate_spin_changing",
                        "is_building_structures",
                        "is_detected",
                        "is_dead_soon",
                        "is_friendly",
                        "is_in_fleet",
                        "is_in_current_gravity_well",
                        "is_in_dominant_culture",
                        "is_inner_planet",
                        "can_ever_hyperspace",
                        "can_ever_move",
                        "is_structure_builder",
                        "not_self",
                        "composite_not",
                        "composite_and",
                        "composite_or"
                    ]
                }
            },
            "required": [
                "constraint_type"
            ],
            "allOf": [
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "has_definition"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "unit_definition": {
                                "$ref": "#/$defs/unit_definition_ptr"
                            }
                        },
                        "required": [
                            "unit_definition"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "has_ability"
                            }
                        }
                    },
                    "then": {}
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "has_adjacent_planet_with_ownership"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "max_jump_distance": {
                                "description": "how many jumps to consider as adjacent. Must be > 0. Default = 1",
                                "type": "integer",
                                "minimum": 1
                            },
                            "targeter_relationship_type": {
                                "type": "string",
                                "enum": [
                                    "self",
                                    "ally",
                                    "enemy",
                                    "none"
                                ]
                            }
                        },
                        "required": [
                            "targeter_relationship_type"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "has_antimatter"
                            }
                        }
                    },
                    "then": {}
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "has_buff"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "buff": {
                                "type": "string"
                            },
                            "include_pending_buffs": {
                                "description": "default=false",
                                "type": "boolean"
                            }
                        },
                        "required": [
                            "buff"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "has_missing_hull"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "amount_missing_threshold": {
                                "type": "number"
                            },
                            "percentage_missing_threshold": {
                                "type": "number"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "has_missing_armor"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "amount_missing_threshold": {
                                "type": "number"
                            },
                            "percentage_missing_threshold": {
                                "type": "number"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "has_missing_shields"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "amount_missing_threshold": {
                                "type": "number"
                            },
                            "percentage_missing_threshold": {
                                "type": "number"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "has_missing_antimatter"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "amount_missing_threshold": {
                                "type": "number"
                            },
                            "percentage_missing_threshold": {
                                "type": "number"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "has_missing_strikecraft"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "amount_missing_threshold": {
                                "type": "number"
                            },
                            "percentage_missing_threshold": {
                                "type": "number"
                            },
                            "strikecraft_kind": {
                                "type": "string"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "has_mutation"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "mutation": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "mutation"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "has_orders"
                            }
                        }
                    },
                    "then": {}
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "has_permission"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "permission_type": {
                                "$ref": "#/$defs/unit_permission_type"
                            }
                        },
                        "required": [
                            "permission_type"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "has_recently_been_damaged"
                            }
                        }
                    },
                    "then": {}
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "has_recently_fired_weapon"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "weapon_type": {
                                "description": "default=normal",
                                "$ref": "#/$defs/weapon_type"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "has_build_price"
                            }
                        }
                    },
                    "then": {}
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "has_health"
                            }
                        }
                    },
                    "then": {}
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "has_shields"
                            }
                        }
                    },
                    "then": {}
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "has_weapon"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "tag": {
                                "$ref": "#/$defs/weapon_tag"
                            },
                            "weapon_type": {
                                "$ref": "#/$defs/weapon_type"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "has_experience"
                            }
                        }
                    },
                    "then": {}
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "has_planet_type"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "planet_types": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/$defs/planet_type"
                                }
                            }
                        },
                        "required": [
                            "planet_types"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "has_ship_role"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "ship_roles": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/$defs/ship_role"
                                }
                            }
                        },
                        "required": [
                            "ship_roles"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "has_unit_level"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "comparison_type": {
                                "type": "string",
                                "enum": [
                                    "less_than",
                                    "less_than_equal_to",
                                    "equal_to",
                                    "equal_to_less_one",
                                    "greater_than_equal_to",
                                    "greater_than"
                                ]
                            },
                            "value_source": {
                                "type": "string",
                                "enum": [
                                    "constraint_params",
                                    "internal"
                                ]
                            }
                        },
                        "required": [
                            "comparison_type",
                            "value_source"
                        ],
                        "if": {
                            "properties": {
                                "value_source": {
                                    "const": "internal"
                                }
                            }
                        },
                        "then": {
                            "properties": {
                                "internal_level": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "internal_level"
                            ]
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "weapon_has_target"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "weapon_type": {
                                "type": "string",
                                "enum": [
                                    "normal",
                                    "planet_bombing"
                                ]
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "is_always_a_threat"
                            }
                        }
                    },
                    "then": {}
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "is_bombing_planet"
                            }
                        }
                    },
                    "then": {}
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "is_carrier"
                            }
                        }
                    },
                    "then": {}
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "is_asteroid"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "asset_type": {
                                "$ref": "#/$defs/asset_type"
                            }
                        },
                        "required": [
                            "asset_type"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "is_colonizable_planet"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "ignore_current_ownership": {
                                "description": "default=false",
                                "type": "boolean"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "is_culture_provider"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "has_base_culture_rate": {
                                "type": "boolean"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "is_explored_planet"
                            }
                        }
                    },
                    "then": {}
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "is_fully_built"
                            }
                        }
                    },
                    "then": {}
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "is_home_planet"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "targeter_relationship_type": {
                                "type": "string",
                                "enum": [
                                    "self",
                                    "ally",
                                    "enemy",
                                    "none"
                                ]
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "is_unit_factory"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "must_be_functional": {
                                "description": "default=false",
                                "type": "boolean"
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "is_unit_factory_building_units"
                            }
                        }
                    },
                    "then": {}
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "is_structure_with_slot_type"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "slot_type": {
                                "$ref": "#/$defs/structure_slot_type"
                            }
                        },
                        "required": [
                            "slot_type"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "is_structure_plate_spin_changing"
                            }
                        }
                    },
                    "then": {}
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "is_building_structures"
                            }
                        }
                    },
                    "then": {}
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "is_detected"
                            }
                        }
                    },
                    "then": {}
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "is_dead_soon"
                            }
                        }
                    },
                    "then": {}
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "is_friendly"
                            }
                        }
                    },
                    "then": {}
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "is_in_fleet"
                            }
                        }
                    },
                    "then": {}
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "is_in_current_gravity_well"
                            }
                        }
                    },
                    "then": {}
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "is_in_dominant_culture"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "dominant_culture_player_relationship": {
                                "description": "relationship between targeter player and culture player",
                                "type": "string",
                                "enum": [
                                    "self",
                                    "ally",
                                    "enemy",
                                    "none"
                                ]
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "is_inner_planet"
                            }
                        }
                    },
                    "then": {}
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "can_ever_hyperspace"
                            }
                        }
                    },
                    "then": {}
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "can_ever_move"
                            }
                        }
                    },
                    "then": {}
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "is_structure_builder"
                            }
                        }
                    },
                    "then": {}
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "not_self"
                            }
                        }
                    },
                    "then": {}
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "composite_not"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "constraint": {
                                "$ref": "#/$defs/unit_constraint"
                            }
                        },
                        "required": [
                            "constraint"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "composite_and"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "constraints": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/$defs/unit_constraint"
                                },
                                "minItems": 2,
                                "maxItems": 5
                            }
                        },
                        "required": [
                            "constraints"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "constraint_type": {
                                "const": "composite_or"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "constraints": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/$defs/unit_constraint"
                                },
                                "minItems": 2,
                                "maxItems": 5
                            }
                        },
                        "required": [
                            "constraints"
                        ]
                    }
                }
            ],
            "unevaluatedProperties": false
        },
        "unit_permission_type": {
            "type": "string",
            "enum": [
                "can_hyperspace",
                "can_be_targeted_by_allies",
                "can_be_targeted_by_enemies",
                "can_be_damaged",
                "can_planet_be_damaged",
                "can_have_hull_restored",
                "can_have_armor_restored",
                "can_have_shields_restored",
                "can_have_shields_burst_restored",
                "can_have_shields_bypassed",
                "can_passively_regenerate_hull",
                "can_passively_regenerate_armor",
                "can_passively_regenerate_shields",
                "can_update_build_progress",
                "can_use_weapons",
                "can_use_weapons_when_crippled",
                "can_use_active_abilities",
                "can_use_abilities_when_crippled",
                "can_be_colonized",
                "can_launch_or_dock_strikecraft",
                "can_update_unit_production",
                "can_create_retargeting_torpedoes"
            ]
        },
        "unit_modifier_type": {
            "type": "string",
            "enum": [
                "ability_cooldown_duration",
                "ability_antimatter_cost",
                "ability_hull_cost",
                "ability_armor_cost",
                "ability_shields_cost",
                "ability_range",
                "max_antimatter",
                "antimatter_restore_rate",
                "max_linear_speed",
                "max_linear_acceleration",
                "max_angular_speed",
                "hyperspace_charge_time",
                "hyperspace_speed",
                "max_hull_points",
                "hull_crippled_percentage",
                "hull_point_restore_rate",
                "hull_point_restore_cooldown_duration_after_damage_taken",
                "max_armor_points",
                "armor_point_restore_rate",
                "armor_point_restore_cooldown_duration_after_damage_taken",
                "armor_strength",
                "max_shield_points",
                "shield_point_restore_rate",
                "shield_point_restore_cooldown_duration_after_damage_taken",
                "shield_burst_restore_points",
                "shield_burst_restore_cooldown_duration",
                "damage_taken",
                "experience_gained_from_unit_death",
                "experience_gained_from_planet_bombing",
                "experience_gained_from_loot_collection",
                "experience_given_on_death",
                "max_squadron_capacity",
                "strikecraft_build_time",
                "credit_income_rate",
                "metal_income_rate",
                "crystal_income_rate",
                "civilian_research_points",
                "military_research_points",
                "culture_rate",
                "culture_resistance_rate",
                "ship_component_price",
                "self_build_time",
                "spell_power",
                "unity_points",
                "trade_import_points",
                "trade_export_credits_points",
                "trade_export_metal_points",
                "trade_export_crystal_points",
                "loot_collection_duration",
                "phase_resonance_bonus_duration"
            ]
        },
        "modifier_value_behavior": {
            "type": "string",
            "enum": [
                "additive",
                "scalar"
            ]
        },
        "structure_slot_type": {
            "type": "string",
            "enum": [
                "civilian",
                "military"
            ]
        },
        "ability_cooldown_change_type": {
            "type": "string",
            "enum": [
                "set_value",
                "reset",
                "reduce_fixed",
                "reduce_percentage_of_remaining",
                "reduce_percentage_of_total"
            ]
        },
        "ability_cooldown_type": {
            "type": "string",
            "enum": [
                "passive",
                "active"
            ]
        },
        "ability_position_picking_type": {
            "type": "string",
            "enum": [
                "random",
                "next_sequential",
                "at_index"
            ]
        },
        "asset_type": {
            "type": "string",
            "enum": [
                "credits",
                "metal",
                "crystal"
            ]
        },
        "player_asset_delta_source": {
            "type": "string",
            "enum": [
                "debug",
                "npc_reward",
                "npc_market_buy_metal",
                "npc_market_sell_metal",
                "npc_market_buy_crystal",
                "npc_market_sell_crystal",
                "npc_market_sell_exotic",
                "alliance_offer_updated",
                "alliance_offer_accepted",
                "derelict_loot",
                "wreckage_loot",
                "action",
                "refund",
                "losing_auction_refund",
                "starting",
                "trade_ship_killed",
                "synergy_ally_dead",
                "surveying_reward"
            ]
        },
        "exotic_type": {
            "type": "string"
        },
        "give_exotic_context": {
            "type": "string",
            "enum": [
                "starting",
                "npc_reward",
                "surveying",
                "factory",
                "alliance_offer",
                "derelict_loot",
                "wreckage_loot",
                "refund",
                "action",
                "research_windfall",
                "destroy_planet_rewards"
            ]
        },
        "buff_definition_ptr": {
            "type": "string"
        },
        "spawn_units_definition": {
            "type": "object",
            "properties": {
                "formation_type": {
                    "$ref": "#/$defs/formation_type"
                },
                "random_units": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "options": {
                                "type": "object",
                                "properties": {
                                    "forced_leveled_up_ability": {
                                        "$ref": "#/$defs/ability_definition_ptr"
                                    },
                                    "forced_strikecraft_index": {
                                        "type": "integer"
                                    },
                                    "is_temporary_ruler_ship": {
                                        "type": "boolean"
                                    },
                                    "items": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/$defs/unit_item_definition_ptr"
                                        }
                                    },
                                    "level": {
                                        "type": "integer"
                                    }
                                },
                                "unevaluatedProperties": false
                            },
                            "unit": {
                                "$ref": "#/$defs/unit_definition_ptr"
                            },
                            "weight": {
                                "type": "number"
                            }
                        },
                        "required": [
                            "unit",
                            "weight"
                        ],
                        "unevaluatedProperties": false
                    }
                },
                "required_units": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "count": {
                                "type": "array",
                                "items": {
                                    "type": "integer"
                                },
                                "minItems": 2,
                                "maxItems": 2
                            },
                            "options": {
                                "type": "object",
                                "properties": {
                                    "forced_leveled_up_ability": {
                                        "$ref": "#/$defs/ability_definition_ptr"
                                    },
                                    "forced_strikecraft_index": {
                                        "type": "integer"
                                    },
                                    "is_temporary_ruler_ship": {
                                        "type": "boolean"
                                    },
                                    "items": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/$defs/unit_item_definition_ptr"
                                        }
                                    },
                                    "level": {
                                        "type": "integer"
                                    }
                                },
                                "unevaluatedProperties": false
                            },
                            "unit": {
                                "$ref": "#/$defs/unit_definition_ptr"
                            }
                        },
                        "required": [
                            "unit"
                        ],
                        "unevaluatedProperties": false
                    }
                }
            },
            "unevaluatedProperties": false
        },
        "unit_definition_ptr": {
            "type": "string"
        },
        "ability_definition_ptr": {
            "type": "string"
        },
        "npc_reward_definition_ptr": {
            "type": "string"
        },
        "damage_source_type": {
            "type": "string",
            "enum": [
                "ability",
                "debug",
                "weapon"
            ]
        },
        "damage_affect_type": {
            "type": "string",
            "enum": [
                "hull_only",
                "armor_only",
                "shields_only",
                "hull_and_shields_only",
                "armor_and_shields_only",
                "hull_and_armor_only",
                "hull_and_armor_and_shields"
            ]
        },
        "planet_type": {
            "type": "string"
        },
        "planet_track_type": {
            "type": "string",
            "enum": [
                "defense",
                "logistics",
                "commerce",
                "mining",
                "research",
                "surveying"
            ]
        },
        "special_operation_unit_kind": {
            "type": "string"
        },
        "formation_type": {
            "type": "string",
            "enum": [
                "ships_and_structures",
                "strikecraft_only"
            ]
        },
        "ship_role": {
            "type": "string",
            "enum": [
                "explore",
                "colonize",
                "attack_ship",
                "anti_structure",
                "bomb_planet",
                "raid"
            ]
        }
    }
}